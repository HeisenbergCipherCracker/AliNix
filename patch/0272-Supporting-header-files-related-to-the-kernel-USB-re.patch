From d0b64826987b4b33f146fd3298eac228e7eb5852 Mon Sep 17 00:00:00 2001
From: Heisenberg <alimirmohammad.1386@gmail.com>
Date: Fri, 5 Apr 2024 20:42:14 -0400
Subject: [PATCH 272/493] Supporting header files related to the kernel USB
 recognition

---
 lib/include/drivers/usb/uhci.hpp              |  32 +++
 lib/include/drivers/usb/usb_hub.hpp           |  35 ++++
 .../usb/usb_human_interface_device.hpp        |  78 ++++++++
 lib/include/drivers/usb/usb_mass_storage.hpp  |  57 ++++++
 lib/include/keys.h                            | 187 ++++++++++++++++++
 5 files changed, 389 insertions(+)
 create mode 100644 lib/include/drivers/usb/uhci.hpp
 create mode 100644 lib/include/drivers/usb/usb_hub.hpp
 create mode 100644 lib/include/drivers/usb/usb_human_interface_device.hpp
 create mode 100644 lib/include/drivers/usb/usb_mass_storage.hpp
 create mode 100644 lib/include/keys.h

diff --git a/lib/include/drivers/usb/uhci.hpp b/lib/include/drivers/usb/uhci.hpp
new file mode 100644
index 0000000..0e3819b
--- /dev/null
+++ b/lib/include/drivers/usb/uhci.hpp
@@ -0,0 +1,32 @@
+#ifndef _HEISEN_KERNEL_UHCI_HPP__
+#define _HEISEN_KERNEL_UHCI_HPP__
+
+#include <types.h>
+
+#ifdef __cplusplus
+using namespace LIBHeisenKernel;
+#endif // __cplusplus
+
+#define UHCI_SETUP 0x2D
+#define UHCI_IN 0x69
+#define UHCI_OUT 0xE1
+
+#define UHCI_NO_POINTER 0x1
+
+void initalize_uhci_controller(byte_t controller_number);
+byte_t uhci_controller_detect_status_change(byte_t controller_number);
+byte_t uhci_get_port_connection_status(byte_t controller_number, byte_t port_number);
+byte_t uhci_get_port_connection_change_status(byte_t controller_number, byte_t port_number);
+void uhci_clear_port_connection_change_status(byte_t controller_number, byte_t port_number);
+byte_t uhci_enable_device_on_port(byte_t controller_number, byte_t port_number);
+void uhci_set_transfer_descriptor(byte_t controller_number, byte_t device_speed, dword_t descriptor, dword_t next_descriptor, dword_t length, dword_t toggle, dword_t endpoint, dword_t device_address, dword_t packet_type, dword_t buffer);
+byte_t uhci_control_or_bulk_transfer(byte_t controller_number, byte_t last_descriptor, dword_t time);
+byte_t uhci_control_transfer_without_data_stage(byte_t controller_number, byte_t device_address, byte_t device_speed);
+byte_t uhci_control_transfer_with_data_stage(byte_t controller_number, byte_t device_address, byte_t device_speed, word_t length);
+dword_t uhci_interrupt_transfer(byte_t controller_number, byte_t device_number, byte_t device_address, byte_t device_speed, byte_t endpoint, byte_t endpoint_size, byte_t interrupt_time, dword_t memory);
+byte_t uhci_bulk_transfer(byte_t controller_number, byte_t device_address, byte_t device_speed, byte_t transfer_type, byte_t endpoint, byte_t toggle, dword_t memory, dword_t length, dword_t time_to_wait);
+byte_t uhci_bulk_out(byte_t controller_number, byte_t device_address, byte_t device_speed, byte_t endpoint, byte_t toggle, dword_t memory, dword_t length, dword_t time_to_wait);
+byte_t uhci_bulk_in(byte_t controller_number, byte_t device_address, byte_t device_speed, byte_t endpoint, byte_t toggle, dword_t memory, dword_t length, dword_t time_to_wait);
+byte_t uhci_hub_is_there_some_port_connection_status_change(byte_t hub_number);
+
+#endif // _HEISEN_KERNEL_UHCI_HPP__
\ No newline at end of file
diff --git a/lib/include/drivers/usb/usb_hub.hpp b/lib/include/drivers/usb/usb_hub.hpp
new file mode 100644
index 0000000..c3c1d24
--- /dev/null
+++ b/lib/include/drivers/usb/usb_hub.hpp
@@ -0,0 +1,35 @@
+#ifndef __HEISEN_KERNEL_USB_HUB_HPP_
+#define __HEISEN_KERNEL_USB_HUB_HPP_
+
+#include <types.h>
+#ifdef __cplusplus
+
+using namespace LIBHeisenKernel;
+
+#endif
+
+
+struct usb_hub {
+ byte_t controller_type;
+ byte_t controller_number;
+ byte_t port;
+ byte_t address;
+ byte_t device_speed;
+ byte_t number_of_ports;
+ dword_t ehci_hub_address;
+ dword_t ehci_hub_port_number;
+ byte_t ports_state[8];
+ byte_t ports_device_speed[8];
+}__attribute__((packed));
+struct usb_hub usb_hubs[10];
+
+dword_t usb_hub_transfer_setup_packets_mem = 0, usb_hub_transfer_data_mem = 0;
+
+byte_t usb_read_hub_number_of_port(byte_t controller_number, byte_t device_address, byte_t device_speed);
+dword_t usb_hub_read_port_status(byte_t controller_number, byte_t device_address, byte_t device_speed, byte_t port);
+byte_t usb_hub_is_there_some_port_connection_status_change(byte_t hub_number);
+byte_t usb_hub_set_feature(byte_t controller_number, byte_t device_address, byte_t device_speed, byte_t index, byte_t value);
+byte_t usb_hub_clear_feature(byte_t controller_number, byte_t device_address, byte_t device_speed, byte_t index, byte_t value);
+
+
+#endif // __HEISEN_KERNEL_USB_HUB_HPP_
\ No newline at end of file
diff --git a/lib/include/drivers/usb/usb_human_interface_device.hpp b/lib/include/drivers/usb/usb_human_interface_device.hpp
new file mode 100644
index 0000000..28c0fc7
--- /dev/null
+++ b/lib/include/drivers/usb/usb_human_interface_device.hpp
@@ -0,0 +1,78 @@
+#ifndef __HEISEN_KERNEL_HUMAN_USB_INTERFACE
+#define __HEISEN_KERNEL_HUMAN_USB_INTERFACE
+
+#include <types.h>
+#include <keys.h>
+#ifdef __cplusplus
+using namespace LIBHeisenKernel;
+#endif
+
+#define USB_DEVICE_KEYBOARD 0x030101
+#define USB_DEVICE_MOUSE 0x030102
+
+#define USB_KEYBOARD_ZERO_10 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
+
+dword_t usb_keyboard_layout[256] = {
+0, 0, 0, 0,
+KEY_A,  KEY_B,  KEY_C,  KEY_D,  KEY_E,  KEY_F,  KEY_G,  KEY_H,  KEY_I,  KEY_J,  KEY_K,  KEY_L,  KEY_M,  KEY_N,  KEY_O,  KEY_P,  KEY_Q,  KEY_R,  KEY_S,  KEY_T,  KEY_U,  KEY_V,  KEY_W,  KEY_X,  KEY_Y,  KEY_Z,
+KEY_1, KEY_2, KEY_3, KEY_4, KEY_5, KEY_6, KEY_7, KEY_8, KEY_9, KEY_0,
+KEY_ENTER, KEY_ESC, KEY_BACKSPACE, KEY_TAB, KEY_SPACE,
+KEY_DASH, KEY_EQUAL, KEY_LEFT_BRACKET, KEY_RIGHT_BRACKET, KEY_BACKSLASH, 0, KEY_SEMICOLON, KEY_SINGLE_QUOTE, KEY_BACK_TICK, KEY_COMMA, KEY_DOT, KEY_FORWARD_SLASH,
+KEY_CAPSLOCK, KEY_F1, KEY_F2, KEY_F3, KEY_F4, KEY_F5, KEY_F6, KEY_F7, KEY_F8, KEY_F9, KEY_F10, KEY_F11, KEY_F12,
+KEY_PRINT_SCREEN, 0, 0, 0, KEY_HOME, KEY_PAGE_UP, KEY_DELETE, KEY_END, KEY_PAGE_DOWN, KEY_RIGHT, KEY_LEFT, KEY_DOWN, KEY_UP,
+USB_KEYBOARD_ZERO_10, USB_KEYBOARD_ZERO_10, USB_KEYBOARD_ZERO_10, USB_KEYBOARD_ZERO_10, USB_KEYBOARD_ZERO_10, USB_KEYBOARD_ZERO_10, USB_KEYBOARD_ZERO_10, USB_KEYBOARD_ZERO_10, USB_KEYBOARD_ZERO_10, USB_KEYBOARD_ZERO_10, USB_KEYBOARD_ZERO_10, USB_KEYBOARD_ZERO_10, USB_KEYBOARD_ZERO_10, USB_KEYBOARD_ZERO_10, 0, 0, //142 zero bytes
+KEY_LEFT_SHIFT, 0, 0, 0, KEY_RIGHT_SHIFT, 0, 0
+};
+
+struct usb_mouse_informations {
+ byte_t controller_type;
+ byte_t controller_number;
+ byte_t port;
+ byte_t address;
+ byte_t device_speed;
+ byte_t endpoint;
+ byte_t endpoint_size;
+ byte_t interrupt_time;
+ dword_t transfer_descriptor_check;
+}__attribute__((packed));
+struct usb_mouse_informations usb_mouse[1];
+
+struct usb_keyboard_informations {
+ byte_t controller_type;
+ byte_t controller_number;
+ byte_t port;
+ byte_t address;
+ byte_t device_speed;
+ byte_t endpoint;
+ byte_t endpoint_size;
+ byte_t interrupt_time;
+ dword_t transfer_descriptor_check;
+}__attribute__((packed));
+struct usb_keyboard_informations usb_keyboard[1];
+
+dword_t usb_mouse_data_memory = 0, usb_mouse_packet_received = 0;
+dword_t usb_keyboard_data_memory = 0, usb_keyboard_packet_received = 0;
+dword_t usb_keyboard_count = 0, usb_keyboard_code_of_pressed_key = 0;
+byte_t usb_keyboard_code = 0;
+
+dword_t usb_mouse_buttons_data_offset_byte = 0;
+dword_t usb_mouse_buttons_data_offset_shift = 0;
+dword_t usb_mouse_movement_x_data_offset_byte = 0;
+dword_t usb_mouse_movement_x_data_offset_shift = 0;
+dword_t usb_mouse_movement_x_data_length = 0;
+dword_t usb_mouse_movement_y_data_offset_byte = 0;
+dword_t usb_mouse_movement_y_data_offset_shift = 0;
+dword_t usb_mouse_movement_y_data_length = 0;
+dword_t usb_mouse_movement_wheel_data_offset_byte = 0;
+dword_t usb_mouse_movement_wheel_data_offset_shift = 0;
+dword_t usb_mouse_movement_wheel_data_length = 0;
+
+void usb_mouse_read_hid_descriptor(byte_t controller_number, byte_t device_address, byte_t device_speed, byte_t interface, word_t length);
+void usb_hid_device_set_protocol(byte_t controller_number, byte_t device_address, byte_t device_speed, byte_t interface, byte_t protocol);
+void usb_hid_device_set_idle(byte_t controller_number, byte_t device_address, byte_t device_speed, byte_t interface);
+void usb_keyboard_process_new_packet(void);
+void usb_keyboard_process_no_new_packet(void);
+void usb_mouse_process_received_data(void);
+
+
+#endif // __HEISEN_KERNEL_HUMAN_USB_INTERFACE
\ No newline at end of file
diff --git a/lib/include/drivers/usb/usb_mass_storage.hpp b/lib/include/drivers/usb/usb_mass_storage.hpp
new file mode 100644
index 0000000..19dddcb
--- /dev/null
+++ b/lib/include/drivers/usb/usb_mass_storage.hpp
@@ -0,0 +1,57 @@
+#ifndef __HEISEN_KERNEL_USB_MASS_STORAGE_HPP
+#define __HEISEN_KERNEL_USB_MASS_STORAGE_HPP
+
+#include <types.h>
+
+#ifdef __cplusplus
+using namespace LIBHeisenKernel;
+#endif
+
+#define USB_DEVICE_MASS_STORAGE 0x080650
+
+#define USB_MSD_NOT_ATTACHED 0
+#define USB_MSD_ATTACHED 1
+#define USB_MSD_INITALIZED 2
+
+#define USB_CBW_READ 0x80
+#define USB_CBW_WRITE 0x00
+
+#define USB_MSD_REQUEST_SENSE 0x03
+#define USB_MSD_INQUIRY 0x12
+#define USB_MSD_READ_FORMAT_CAPACITIES 0x23
+#define USB_MSD_CAPACITY 0x25
+#define USB_MSD_READ_10 0x28
+#define USB_MSD_WRITE_10 0x2A
+
+struct usb_mass_storage_device {
+ byte_t type;
+ byte_t controller_number;
+ byte_t controller_type;
+ byte_t interface;
+ byte_t port;
+ byte_t address;
+ byte_t device_speed;
+ byte_t endpoint_in;
+ byte_t toggle_in;
+ byte_t endpoint_out;
+ byte_t toggle_out;
+ dword_t ehci_hub_address;
+ dword_t ehci_hub_port_number;
+ dword_t size_in_sectors;
+ dword_t size_of_sector;
+}__attribute__((packed));
+struct usb_mass_storage_device usb_mass_storage_devices[10];
+
+dword_t usb_mass_storage_cbw_memory = 0, usb_mass_storage_response_memory = 0, usb_mass_storage_csw_memory = 0;
+
+void usb_mass_storage_initalize(byte_t device_number);
+void usb_msd_create_cbw(byte_t transfer_type, byte_t command_length, dword_t transfer_length);
+byte_t usb_msd_transfer_command(byte_t device_number, byte_t direction, dword_t memory, dword_t length_of_transfer);
+byte_t usb_msd_send_inquiry_command(byte_t device_number);
+byte_t usb_msd_send_request_sense_command(byte_t device_number);
+byte_t usb_msd_send_capacity_command(byte_t device_number);
+byte_t usb_msd_read(byte_t device_number, dword_t sector, byte_t number_of_sectors, dword_t memory);
+byte_t usb_msd_write(byte_t device_number, dword_t sector, byte_t number_of_sectors, dword_t memory);
+void usb_msd_recover_from_error(byte_t device_number);
+
+#endif // __HEISEN_KERNEL_USB_MASS_STORAGE_HPP
\ No newline at end of file
diff --git a/lib/include/keys.h b/lib/include/keys.h
new file mode 100644
index 0000000..955a423
--- /dev/null
+++ b/lib/include/keys.h
@@ -0,0 +1,187 @@
+#pragma once
+
+
+#define KEY_ESC 0x01
+#define KEY_ENTER 0x1C
+#define KEY_TAB 0x0F
+#define KEY_BACKSPACE 0x0E
+#define KEY_CAPSLOCK 0x3A
+#define KEY_ESCAPE 0x01
+#define KEY_LEFT_SHIFT 0x2A
+#define KEY_RIGHT_SHIFT 0x36
+#define KEY_LEFT_ALT 0x38
+#define KEY_RIGHT_ALT 0xE038
+#define KEY_LEFT_CTRL 0x1D
+#define KEY_RIGHT_CTRL 0xE01D
+#define KEY_NUMBERLOCK 0x45
+#define KEY_SCROLLLOCK 0x46
+
+#define KEY_HOME 0xE047
+#define KEY_PAGE_UP 0xE049
+#define KEY_PAGE_DOWN 0xE051
+#define KEY_END 0xE04F
+#define KEY_INSERT 0xE052
+#define KEY_DELETE 0xE053
+#define KEY_UP 0xE048
+#define KEY_DOWN 0xE050
+#define KEY_LEFT 0xE04B
+#define KEY_RIGHT 0xE04D
+
+#define KEY_F1 0x3B
+#define KEY_F2 0x3C
+#define KEY_F3 0x3D
+#define KEY_F4 0x3E
+#define KEY_F5 0x3F
+#define KEY_F6 0x40
+#define KEY_F7 0x41
+#define KEY_F8 0x42
+#define KEY_F9 0x43
+#define KEY_F10 0x44
+#define KEY_F11 0x57
+#define KEY_F12 0x58
+
+#define KEY_A 0x1E
+#define KEY_B 0x30
+#define KEY_C 0x2E
+#define KEY_D 0x20
+#define KEY_E 0x12
+#define KEY_F 0x21
+#define KEY_G 0x22
+#define KEY_H 0x23
+#define KEY_I 0x17
+#define KEY_J 0x24
+#define KEY_K 0x25
+#define KEY_L 0x26
+#define KEY_M 0x32
+#define KEY_N 0x31
+#define KEY_O 0x18
+#define KEY_P 0x19
+#define KEY_Q 0x10
+#define KEY_R 0x13
+#define KEY_S 0x1F
+#define KEY_T 0x14
+#define KEY_U 0x16
+#define KEY_V 0x2F
+#define KEY_W 0x11
+#define KEY_X 0x2D
+#define KEY_Y 0x15
+#define KEY_Z 0x2C
+#define KEY_SPACE 0x39
+
+#define KEY_1 0x02
+#define KEY_2 0x03
+#define KEY_3 0x04
+#define KEY_4 0x05
+#define KEY_5 0x06
+#define KEY_6 0x07
+#define KEY_7 0x08
+#define KEY_8 0x09
+#define KEY_9 0x0A
+#define KEY_0 0x0B
+
+#define KEY_DASH 0x0C
+#define KEY_EQUAL 0x0D
+#define KEY_LEFT_BRACKET 0x1A
+#define KEY_RIGHT_BRACKET 0x1B
+#define KEY_BACKSLASH 0x2B
+#define KEY_SEMICOLON 0x27
+#define KEY_SINGLE_QUOTE 0x28
+#define KEY_COMMA 0x33
+#define KEY_DOT 0x34
+#define KEY_FORWARD_SLASH 0x35
+#define KEY_BACK_TICK 0x29
+
+#define KEY_KEYPAD_ASTERISK 0x37
+#define KEY_KEYPAD_MINUS 0x4A
+#define KEY_KEYPAD_PLUS 0x4E
+#define KEY_KEYPAD_DOT 0x53
+#define KEY_KEYPAD_ENTER 0xE01C
+#define KEY_KEYPAD_FORWARD_SLASH 0xE035
+#define KEY_KEYPAD_0 0x52
+#define KEY_KEYPAD_1 0x4F
+#define KEY_KEYPAD_2 0x50
+#define KEY_KEYPAD_3 0x51
+#define KEY_KEYPAD_4 0x4B
+#define KEY_KEYPAD_5 0x4C
+#define KEY_KEYPAD_6 0x4D
+#define KEY_KEYPAD_7 0x47
+#define KEY_KEYPAD_8 0x48
+#define KEY_KEYPAD_9 0x49
+
+#define KEY_POWER_BUTTON 0xE05E
+#define KEY_PRINT_SCREEN 0xE037
+
+#define RELEASED_KEY_CODE(key) (key+0x80)
+
+#include <types.h>
+#ifdef __cplusplus
+
+using namespace LIBHeisenKernel;
+
+#endif
+
+
+word_t english_keyboard_layout[256] = {
+ 0, 0, //zero, escape
+ '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '-', '=', 0, 0, //backspace, tab
+ 'q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p', '[', ']', 0xA, 0, //enter, left ctrl
+ 'a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l', ';', '`', '`', 0, '\\', //left shift
+ 'z', 'x', 'c', 'v', 'b', 'n', 'm', ',', '.', '/', 0, '*', 0, ' ', //right shift
+ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, //other control keys
+ '7', '8', '9', '-', '4', '5', '6', '+', '1', '2', '3', '0', '.', //numpad
+ 0 //other keys
+};
+
+word_t english_shift_keyboard_layout[256] = {
+ 0, 0, //zero, escape
+ '!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '_', '+', 0, 0, //backspace, tab
+ 'Q', 'W', 'E', 'R', 'T', 'Y', 'U', 'I', 'O', 'P', '{', '}', 0xA, 0, //enter, left ctrl
+ 'A', 'S', 'D', 'F', 'G', 'H', 'J', 'K', 'L', ':', '"', '~', 0, '|', //left shift
+ 'Z', 'X', 'C', 'V', 'B', 'N', 'M', '<', '>', '?', 0, '*', 0, ' ', //right shift
+ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, //other control keys
+ '7', '8', '9', '-', '4', '5', '6', '+', '1', '2', '3', '0', '.', //numpad
+ 0 //other keys
+};
+
+word_t slovak_keyboard_layout[256] = {
+ 0, 0, //zero, escape
+ '+', 0x13E, 0x161, 0x10D, 0x165, 0x17E, 0xFD, 0xE1, 0xED, 0xE9, '=', 0x0301, 0, 0, //backspace, tab
+ 'q', 'w', 'e', 'r', 't', 'z', 'u', 'i', 'o', 'p', 0xFA, 0xE4, 0xA, 0, //enter, left ctrl
+ 'a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 0xF4, 0xA7, ';', 0, 0x148, //left shift
+ 'y', 'x', 'c', 'v', 'b', 'n', 'm', ',', '.', '-', 0, '\\', 0, ' ', //right shift
+ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, //other control keys
+ '7', '8', '9', '-', '4', '5', '6', '+', '1', '2', '3', '0', '.', //numpad
+ 0 //other keys
+};
+
+word_t slovak_shift_keyboard_layout[256] = {
+ 0, 0, //zero, escape
+ '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '%', 0x030C, 0, 0, //backspace, tab
+ 'Q', 'W', 'E', 'R', 'T', 'Z', 'U', 'I', 'O', 'P', '/', '(', 0xA, 0, //enter, left ctrl
+ 'A', 'S', 'D', 'F', 'G', 'H', 'J', 'K', 'L', '"', '!', 0xC2B0, 0, ')', //left shift
+ 'Y', 'X', 'C', 'V', 'B', 'N', 'M', '?', ':', '_', 0, '|', 0, ' ', //right shift
+ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, //other control keys
+ '7', '8', '9', '-', '4', '5', '6', '+', '1', '2', '3', '0', '.', //numpad
+ 0 //other keys
+};
+
+#define KEYBOARD_SHIFT 0x1
+#define KEYBOARD_CTRL 0x2
+#define KEYBOARD_ALT 0x4
+#define KEYBOARD_CAPSLOCK 0x8
+byte_t keyboard_pressed_control_keys;
+
+dword_t keyboard_code_of_pressed_key;
+word_t keyboard_diacritic_char_for_next_key;
+word_t keyboard_unicode_value_of_pressed_key;
+
+#define KEYBOARD_LED_CAPSLOCK 0x1
+#define KEYBOARD_LED_NUMBERLOCK 0x2
+#define KEYBOARD_LED_SCROLLOCK 0x4
+byte_t keyboard_led_state, keyboard_change_in_led_state;
+
+word_t *keyboard_layout_ptr;
+word_t *keyboard_shift_layout_ptr;
+
+void initalize_keyboard(void);
+void keyboard_process_code(dword_t code);
\ No newline at end of file
-- 
2.43.0

