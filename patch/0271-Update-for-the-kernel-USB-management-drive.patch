From fb531deb834275f1d59f9a530cb06759ad212466 Mon Sep 17 00:00:00 2001
From: Heisenberg <alimirmohammad.1386@gmail.com>
Date: Fri, 5 Apr 2024 20:32:55 -0400
Subject: [PATCH 271/493] Update for the kernel USB management drive

---
 kernelz/src/core/usb3.cpp        |   5 ++
 lib/include/drivers/usb/main.hpp | 109 +++++++++++++++++++++++++++++++
 lib/include/drivers/usb/ohci.hpp |  33 ++++++++++
 lib/include/pmmngr.h             |  10 +++
 lib/include/types.h              |  21 ++++++
 5 files changed, 178 insertions(+)
 create mode 100644 lib/include/drivers/usb/main.hpp
 create mode 100644 lib/include/drivers/usb/ohci.hpp
 create mode 100644 lib/include/pmmngr.h

diff --git a/kernelz/src/core/usb3.cpp b/kernelz/src/core/usb3.cpp
index 64a2bc4..f49815f 100644
--- a/kernelz/src/core/usb3.cpp
+++ b/kernelz/src/core/usb3.cpp
@@ -15,6 +15,7 @@
 
  */
 #include <usb3.h>
+#include <string.h>
 
 using namespace LIBHeisenKernel;
 
@@ -52,3 +53,7 @@ void XHCIReset(USBDevice *dev){
 	while ((dev->op_regs->op_usbcmd & (1 << 1)));
 	while ((dev->op_regs->op_usbsts & (1 << 11)));
 }
+
+void XHCIDeviceContextInit(USBDevice *dev){
+    
+}
\ No newline at end of file
diff --git a/lib/include/drivers/usb/main.hpp b/lib/include/drivers/usb/main.hpp
new file mode 100644
index 0000000..fc3c834
--- /dev/null
+++ b/lib/include/drivers/usb/main.hpp
@@ -0,0 +1,109 @@
+#ifndef _HEISEN_MAIN_USB_DRIVE_HPP
+#define _HEISEN_MAIN_USB_DRIVE_HPP
+
+#include <types.h>
+
+#ifdef __cplusplus
+
+using namespace LIBHeisenKernel;
+
+#endif
+
+#define USB_NO_DEVICE_ATTACHED 0
+#define USB_CONTROLLER_UHCI 1
+#define USB_CONTROLLER_OHCI 2
+#define USB_CONTROLLER_EHCI 3
+#define USB_CONTROLLER_xHCI 4
+
+#define PORT_NO_DEVICE 0
+#define PORT_DEVICE 1
+#define PORT_INITALIZED_DEVICE 2
+
+#define USB_LOW_SPEED 1
+#define USB_FULL_SPEED 2
+#define USB_HIGH_SPEED 3
+#define USB_SUPER_SPEED 4
+
+#define TOGGLE_0 0
+#define TOGGLE_1 1
+#define ENDPOINT_0 0
+
+#define USB_DEVICE_MASS_STORAGE 0x080650
+#define USB_DEVICE_HUB 0x090000
+
+#define USB_BOOT_PROTOCOL 0
+#define USB_HID_PROTOCOL 1
+
+#define USB_HID_USAGE_BUTTONS 1
+#define USB_HID_USAGE_MOVEMENT_X 2
+#define USB_HID_USAGE_MOVEMENT_Y 3
+#define USB_HID_USAGE_WHEEL 4
+
+struct usb_controller_informations {
+ byte_t bus;
+ byte_t device;
+ byte_t function;
+ byte_t type;
+ dword_t base;
+ dword_t base2;
+ byte_t number_of_ports;
+ byte_t ports_state[16];
+ byte_t ports_device_speed[16];
+ dword_t mem1;
+ dword_t mem2;
+ dword_t mem3;
+ dword_t mem4;
+ dword_t setup_mem;
+}__attribute__((packed));
+struct usb_controller_informations usb_controllers[20];
+
+struct usb_descriptor_device_info {
+ dword_t type;
+ byte_t configuration;
+ byte_t interface;
+ byte_t alternative_interface;
+ byte_t endpoint_bulk_in;
+ byte_t endpoint_bulk_out;
+ byte_t endpoint_interrupt;
+ byte_t endpoint_interrupt_size;
+ byte_t endpoint_interrupt_time;
+ byte_t endpoint_interrupt_out;
+ byte_t endpoint_isynchronous_in;
+ word_t hid_descriptor_length;
+}__attribute__((packed));
+struct usb_descriptor_device_info usb_descriptor_devices[10];
+
+byte_t usb_addresses[127];
+
+dword_t usb_controllers_pointer = 0, usb_control_endpoint_size = 0, usb_device_address = 0, usb_new_device_detected = 0;
+dword_t usb_setup_packet_mem = 0, usb_setup_packet_data_mem = 0;
+byte_t usb_bulk_toggle = 0;
+
+void initalize_usb_controllers(void);
+void detect_usb_devices(void);
+void detect_usb_devices_on_hubs(void);
+void detect_usb_devices_on_controller(byte_t controller_number);
+void detect_usb_devices_on_hub(byte_t hub_number);
+void usb_remove_device(byte_t controller_number, byte_t port_number);
+void detect_status_change_of_usb_devices(void);;
+byte_t usb_get_port_connection_status(byte_t controller_number, byte_t port_number);
+byte_t usb_get_port_connection_change_status(byte_t controller_number, byte_t port_number);
+void usb_clear_port_connection_change_status(byte_t controller_number, byte_t port_number);
+byte_t usb_enable_device_on_port(byte_t controller_number, byte_t port_number);
+void usb_create_setup_data(byte_t request_type, byte_t request, word_t value, word_t index, word_t length);
+byte_t usb_control_transfer_without_data(byte_t controller_number, byte_t device_address, byte_t device_speed, byte_t request_type, byte_t request, word_t value, word_t index);
+byte_t usb_control_transfer_with_fixed_data_length(byte_t controller_number, byte_t device_address, byte_t device_speed, byte_t request_type, byte_t request, word_t value, word_t index, word_t length);
+byte_t usb_control_transfer_with_dynamic_data_length(byte_t controller_number, byte_t device_address, byte_t device_speed, byte_t request_type, byte_t request, word_t value, word_t index);
+dword_t usb_interrupt_transfer(byte_t controller_number, byte_t device_number, byte_t device_address, byte_t device_speed, byte_t endpoint, byte_t endpoint_size, byte_t interrupt_time, dword_t memory);
+byte_t usb_bulk_in(byte_t controller_number, byte_t device_address, byte_t device_speed, byte_t endpoint, byte_t toggle, dword_t memory, dword_t length_of_transfer, dword_t time_to_wait);
+byte_t usb_bulk_out(byte_t controller_number, byte_t device_address, byte_t device_speed, byte_t endpoint, byte_t toggle, dword_t memory, dword_t length_of_transfer, dword_t time_to_wait);
+byte_t usb_set_configuration_and_interface(byte_t controller_number, byte_t device_address, byte_t device_speed, byte_t configuration, byte_t interface, byte_t alternative_interface);
+byte_t usb_reset_endpoint(byte_t controller_number, byte_t device_address, byte_t device_speed, byte_t endpoint);
+void usb_configure_device_with_zero_address(byte_t controller_number, byte_t device_port, byte_t device_speed);
+byte_t get_free_usb_address(void);
+void release_usb_address(byte_t address);
+void parse_usb_descriptor(dword_t descriptor_mem);
+void parse_usb_configuration_descriptor(dword_t descriptor_mem);
+void parse_hid_descriptor(dword_t descriptor_mem);
+
+#endif
\ No newline at end of file
diff --git a/lib/include/drivers/usb/ohci.hpp b/lib/include/drivers/usb/ohci.hpp
new file mode 100644
index 0000000..7129b82
--- /dev/null
+++ b/lib/include/drivers/usb/ohci.hpp
@@ -0,0 +1,33 @@
+#ifndef _HEISEN_KERNEL_OHCI_HPP
+#define _HEISEN_KERNEL_OHCI_HPP
+
+
+#include <types.h>
+
+#ifdef __cplusplus
+using namespace LIBHeisenKernel;
+#endif //__cplusplus
+
+#define OHCI_SETUP (0 << 19)
+#define OHCI_OUT (1 << 19)
+#define OHCI_IN (2 << 19)
+
+void initalize_ohci_controller(byte_t controller_number);
+byte_t ohci_controller_detect_status_change(byte_t controller_number);
+byte_t ohci_get_port_connection_status(byte_t controller_number, byte_t port_number);
+byte_t ohci_get_port_connection_change_status(byte_t controller_number, byte_t port_number);
+void ohci_clear_port_connection_change_status(byte_t controller_number, byte_t port_number);
+byte_t ohci_enable_device_on_port(byte_t controller_number, byte_t port_number);
+void ohci_set_ed(byte_t controller_number, byte_t device_speed, dword_t ed_number, dword_t address, dword_t endpoint, dword_t first_td, dword_t num_of_td);
+void ohci_set_td(byte_t controller_number, dword_t td_number, dword_t next_td, dword_t attributes, dword_t toggle, dword_t buffer, dword_t buffer_length);
+byte_t ohci_control_transfer(byte_t controller_number, dword_t last_td, dword_t time);
+byte_t ohci_bulk_transfer(byte_t controller_number, dword_t last_td, dword_t time);
+byte_t ohci_control_transfer_without_data_stage(byte_t controller_number, byte_t device_address, byte_t device_speed);
+byte_t ohci_control_transfer_with_data_stage(byte_t controller_number, byte_t device_address, byte_t device_speed, word_t length);
+dword_t ohci_interrupt_transfer(byte_t controller_number, byte_t device_number, byte_t device_address, byte_t device_speed, byte_t endpoint, byte_t endpoint_size, byte_t interrupt_time, dword_t memory);
+byte_t ohci_send_bulk_transfer(byte_t controller_number, byte_t device_address, byte_t device_speed, dword_t transfer_type, byte_t endpoint, byte_t toggle, dword_t memory, dword_t length, dword_t time_to_wait);
+byte_t ohci_bulk_out(byte_t controller_number, byte_t device_address, byte_t device_speed, byte_t endpoint, byte_t toggle, dword_t memory, dword_t length, dword_t time_to_wait);
+byte_t ohci_bulk_in(byte_t controller_number, byte_t device_address, byte_t device_speed, byte_t endpoint, byte_t toggle, dword_t memory, dword_t length, dword_t time_to_wait);
+byte_t ohci_hub_is_there_some_port_connection_status_change(byte_t hub_number);
+
+#endif // _HEISEN_KERNEL_OHCI_HPP
\ No newline at end of file
diff --git a/lib/include/pmmngr.h b/lib/include/pmmngr.h
new file mode 100644
index 0000000..378ffc2
--- /dev/null
+++ b/lib/include/pmmngr.h
@@ -0,0 +1,10 @@
+#ifndef _HEISEN_PMMNGR_H
+#define _HEISEN_PMMNGR_H
+
+
+void *AuPmmngrAlloc();
+
+
+
+
+#endif 
\ No newline at end of file
diff --git a/lib/include/types.h b/lib/include/types.h
index 559bb55..bc6857b 100644
--- a/lib/include/types.h
+++ b/lib/include/types.h
@@ -17,6 +17,10 @@ namespace LIBHeisenKernel
     typedef unsigned long long int      uint64_t;
     typedef unsigned long long          uintptr_t;
     typedef uint32_t size_t; 
+    typedef unsigned char byte_t;
+    typedef unsigned int dword_t;
+    typedef long unsigned int word_t;
+
 
     constexpr uint32_t operator"" _KB(unsigned long long no)
     {
@@ -32,4 +36,21 @@ namespace LIBHeisenKernel
     }
 }
 
+extern "C"{
+
+    typedef char                        int8_t;
+    typedef unsigned char               uint8_t;
+    typedef short                       int16_t;
+    typedef unsigned short              uint16_t;
+    typedef int                         int32_t;
+    typedef unsigned int                uint32_t;
+    typedef long long int               int64_t;
+    typedef unsigned long long int      uint64_t;
+    typedef unsigned long long          uintptr_t;
+    typedef uint32_t size_t; 
+    typedef unsigned char byte_t;
+    typedef unsigned int dword_t;
+    typedef long unsigned int word_t;
+}
+
 #endif
\ No newline at end of file
-- 
2.43.0

