From 007747abc8c2a1ea9822a4efa5af25bc4b82d0f4 Mon Sep 17 00:00:00 2001
From: Heisenberg <alimirmohammad.1386@gmail.com>
Date: Fri, 5 Apr 2024 22:47:02 -0400
Subject: [PATCH 306/493] Minor patch

---
 kernelz/src/boot/loader.s | 103 ++++++++++++++++++++------------------
 1 file changed, 55 insertions(+), 48 deletions(-)

diff --git a/kernelz/src/boot/loader.s b/kernelz/src/boot/loader.s
index e079500..2931aed 100644
--- a/kernelz/src/boot/loader.s
+++ b/kernelz/src/boot/loader.s
@@ -1,78 +1,86 @@
-.set ALIGN,    1<<0             
-.set MEMINFO,  1<<1             
-.set FLAGS,    ALIGN | MEMINFO  
-.set MAGIC,    0x1BADB002      
-.set CHECKSUM, -(MAGIC + FLAGS) 
+.set ALIGN,    1<<0             ;align loaded modules on page boundaries
+.set MEMINFO,  1<<1             ;provide memory map
+.set FLAGS,    ALIGN | MEMINFO  ;this is the Multiboot 'flag' field
+.set MAGIC,    0x1BADB002       ;'magic number' lets bootloader find the header
+.set CHECKSUM, -(MAGIC + FLAGS) ;checksum of above, to prove we are multiboot
 
 .section .multiboot
-    .align 4
-    .long MAGIC
-    .long FLAGS
-    .long CHECKSUM
+	.align 4
+	.long MAGIC
+	.long FLAGS
+	.long CHECKSUM
 
 .set KERNEL_VIRTUAL_BASE, 0xC0000000
 .set KERNEL_PAGE_NUMBER, (KERNEL_VIRTUAL_BASE >> 22)
 
 .section .bootstrap_stack, "aw", @nobits
-    .align 16  
 stack_bottom:
-    .skip 16384 
+.skip 16384 ;16 KiB
 .global stack_top
 stack_top:
 
 .section .data
-    .align 0x1000
-
-#ifndef BootPageDirectory
+.align 0x1000
 .global BootPageDirectory
 BootPageDirectory:
-    .long 0x00000083
-    
-    .rept (KERNEL_PAGE_NUMBER - 1)
-        .long 0
-    .endr
-    
-    .long 0x00000083
-
-    .rept (1024 - KERNEL_PAGE_NUMBER - 1)
-        .long 0
-    .endr
-#endif
+	;identity map the first 4 MB
+	.long 0x00000083
+	
+	;pages before kernel
+	.rept (KERNEL_PAGE_NUMBER - 1)
+	.long 0
+	.endr
+	
+	;this page contains the kernel
+	.long 0x00000083
+
+	;pages after kernel
+	.rept (1024 - KERNEL_PAGE_NUMBER - 1)
+	.long 0
+	.endr
+
+.global _kernel_virtual_base
+_kernel_virtual_base:
+	.long KERNEL_VIRTUAL_BASE
 
 .section .text
-    .align 4
-
-#ifndef _entrypoint
+.align 4
 .global _entrypoint
 .type _entrypoint, @function
+
 _entrypoint:
-    mov $(BootPageDirectory - KERNEL_VIRTUAL_BASE), %ecx
-    mov %ecx, %cr3
+	mov $(BootPageDirectory - KERNEL_VIRTUAL_BASE), %ecx
+	mov %ecx, %cr3
 
-    mov %cr4, %ecx
-    or $0x00000010, %ecx
-    mov %ecx, %cr4
+	;enable 4 mb pages
+	mov %cr4, %ecx
+	or $0x00000010, %ecx
+	mov %ecx, %cr4
 
-    mov %cr0, %ecx
-    or $0x80000001, %ecx
-    mov %ecx, %cr0
+	;enable paging
+	mov %cr0, %ecx
+	or $0x80000001, %ecx
+	mov %ecx, %cr0
 
-    lea 4f, %ecx
-    jmp *%ecx
+	;jump to higher half code
+	lea 4f, %ecx
+	jmp *%ecx
 
 4:
-    movl $0, BootPageDirectory
-    invlpg 0
+	;Unmap the identity-mapped pages
+	movl $0, BootPageDirectory
+	invlpg 0
 
-    movl $stack_top, %esp
-    movl $0, %ebp
+	movl $stack_top, %esp
+	;Mark end of call stack for unwinding
+	movl $0, %ebp
 
-    add $KERNEL_VIRTUAL_BASE, %ebx
+	add $KERNEL_VIRTUAL_BASE, %ebx
 
     call callConstructors
 
-    push $_kernel_base
-    push $_kernel_end
+	push $_kernel_base
+	push $_kernel_end
     push %eax
     push %ebx
     call kernelMain
@@ -80,5 +88,4 @@ _entrypoint:
 _stop:
     cli
     hlt
-    jmp _stop
-#endif
+    jmp _stop
\ No newline at end of file
-- 
2.43.0

