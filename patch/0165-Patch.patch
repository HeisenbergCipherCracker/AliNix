From f9c8ee3bb04fc0b690dbfe0ab06a17c09aef0564 Mon Sep 17 00:00:00 2001
From: Heisenberg <alimirmohammad.1386@gmail.com>
Date: Tue, 2 Apr 2024 22:24:04 -0400
Subject: [PATCH 165/493] Patch

---
 kernelz/src/boot/loader.s | 30 +++++++++++++++---------------
 1 file changed, 15 insertions(+), 15 deletions(-)

diff --git a/kernelz/src/boot/loader.s b/kernelz/src/boot/loader.s
index 3125174..e8a345c 100644
--- a/kernelz/src/boot/loader.s
+++ b/kernelz/src/boot/loader.s
@@ -1,8 +1,8 @@
-.set ALIGN,    1<<0             # align loaded modules on page boundaries
-.set MEMINFO,  1<<1             # provide memory map
-.set FLAGS,    ALIGN | MEMINFO  # this is the Multiboot 'flag' field
-.set MAGIC,    0x1BADB002       # 'magic number' lets bootloader find the header
-.set CHECKSUM, -(MAGIC + FLAGS) # checksum of above, to prove we are multiboot
+.set ALIGN,    1<<0             ; align loaded modules on page boundaries
+.set MEMINFO,  1<<1             ; provide memory map
+.set FLAGS,    ALIGN | MEMINFO  ; this is the Multiboot 'flag' field
+.set MAGIC,    0x1BADB002       ; 'magic number' lets bootloader find the header
+.set CHECKSUM, -(MAGIC + FLAGS) ; checksum of above, to prove we are multiboot
 
 .section .multiboot
 	.align 4
@@ -15,7 +15,7 @@
 
 .section .bootstrap_stack, "aw", @nobits
 stack_bottom:
-.skip 16384 # 16 KiB
+.skip 16384 ; 16 KiB
 .global stack_top
 stack_top:
 
@@ -23,18 +23,18 @@ stack_top:
 .align 0x1000
 .global BootPageDirectory
 BootPageDirectory:
-	# identity map the first 4 MB
+	; identity map the first 4 MB
 	.long 0x00000083
 	
-	# pages before kernel
+	; pages before kernel
 	.rept (KERNEL_PAGE_NUMBER - 1)
 	.long 0
 	.endr
 	
-	# this page contains the kernel
+	; this page contains the kernel
 	.long 0x00000083
 
-	# pages after kernel
+	; pages after kernel
 	.rept (1024 - KERNEL_PAGE_NUMBER - 1)
 	.long 0
 	.endr
@@ -52,27 +52,27 @@ _entrypoint:
 	mov $(BootPageDirectory - KERNEL_VIRTUAL_BASE), %ecx
 	mov %ecx, %cr3
 
-	# enable 4 mb pages
+	; enable 4 mb pages
 	mov %cr4, %ecx
 	or $0x00000010, %ecx
 	mov %ecx, %cr4
 
-	# enable paging
+	; enable paging
 	mov %cr0, %ecx
 	or $0x80000001, %ecx
 	mov %ecx, %cr0
 
-	# jump to higher half code
+	; jump to higher half code
 	lea 4f, %ecx
 	jmp *%ecx
 
 4:
-	# Unmap the identity-mapped pages
+	; Unmap the identity-mapped pages
 	movl $0, BootPageDirectory
 	invlpg 0
 
 	movl $stack_top, %esp
-	# Mark end of call stack for unwinding
+	; Mark end of call stack for unwinding
 	movl $0, %ebp
 
 	add $KERNEL_VIRTUAL_BASE, %ebx
-- 
2.43.0

