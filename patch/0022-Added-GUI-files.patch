From e301d8ca6fc350dd7db5769651800a379120a69e Mon Sep 17 00:00:00 2001
From: Heisenberg <alimirmohammad.1386@gmail.com>
Date: Sun, 31 Mar 2024 21:06:04 -0400
Subject: [PATCH 22/50] Added GUI files

---
 include/io/video.h           |  50 ++++
 kernel/arch/x86-pc/startup.c |   1 -
 kernel/io/video.c            | 447 +++++++++++++++++++++++++++++++++++
 kernel/terminal/commands.c   |  19 ++
 kernel/terminal/commands.h   |   7 +
 kernel/terminal/logo.txt     |   6 +
 kernel/terminal/shell.c      |  24 ++
 kernel/terminal/shell.h      |  36 +++
 8 files changed, 589 insertions(+), 1 deletion(-)
 create mode 100644 include/io/video.h
 create mode 100644 kernel/io/video.c
 create mode 100644 kernel/terminal/commands.c
 create mode 100644 kernel/terminal/commands.h
 create mode 100644 kernel/terminal/logo.txt
 create mode 100644 kernel/terminal/shell.c
 create mode 100644 kernel/terminal/shell.h

diff --git a/include/io/video.h b/include/io/video.h
new file mode 100644
index 0000000..e8f2d91
--- /dev/null
+++ b/include/io/video.h
@@ -0,0 +1,50 @@
+#ifndef _HEISEN_VIDEO_H
+#define _HEISEN_VIDEO
+
+#define _SCR_W 80
+#define _SCR_H 25
+
+#define BLACK 0
+#define BLUE 1
+#define GREEN 2
+#define CYAN 3
+#define RED 4
+#define MAGENTA 5
+#define BROWN 6
+#define GREY 7
+#define DARK_GREY 8
+#define BRIGHT_BLUE 9
+#define BRIGHT_GREEN 10
+#define BRIGHT_CYAN 11
+#define BRIGHT_RED 12
+#define BRIGHT_MAGENTA 13
+#define YELLOW 14
+#define WHITE 15
+
+
+#define OK_POS 70
+
+void _kntos(char*, unsigned int, int);
+void _kputc(char);
+void _kcolor(char);
+void _kputs(char *);
+void _kbackspace();
+void _kesetcursor(unsigned int, unsigned int);
+void _kgoto(int, int);
+void _ksetcursauto();
+void _kshiftAll();
+void _ktab();
+void _kclear();
+void _knewline();
+void _kminline();
+void _kprintOK();
+int _kgetline();
+int _kgetcolumn();
+void _krotate_buffer();
+void _kscrollup();
+void _kscrolldown();
+void _kntohex (char *, unsigned int);
+void _knntos(char *, int, int );
+unsigned short shell_mess_col, shell_mess_line;
+
+#endif // 
\ No newline at end of file
diff --git a/kernel/arch/x86-pc/startup.c b/kernel/arch/x86-pc/startup.c
index 7b10ea5..a9cb466 100644
--- a/kernel/arch/x86-pc/startup.c
+++ b/kernel/arch/x86-pc/startup.c
@@ -86,7 +86,6 @@ void roentgenium_main(uint32_t magic, uint32_t address)
     uint16_t buffer_len = sizeof(buff) - 1; // -1 to exclude the null terminator
 
     // Call console_write to write the buff to the console
-    console_write(&cons, buff, buffer_len);
 
 
     // colorForth
diff --git a/kernel/io/video.c b/kernel/io/video.c
new file mode 100644
index 0000000..0bc1339
--- /dev/null
+++ b/kernel/io/video.c
@@ -0,0 +1,447 @@
+#include <io/video.h>
+#include <stddef.h>
+#include <string.h>
+
+char *VIDEO_MEM = (char*) 0xb8000,
+     *VIDEO_PTR = (char*) 0xb8000,
+    VIDEO_CLR = 0x7;
+
+// Scrolling buffer 
+char upbuffer[_SCR_H][_SCR_W*2];
+char downbuffer[_SCR_H][_SCR_W*2];
+int is_scrolled=0;
+int is_shifted_once=0;
+unsigned int last_tab=0;
+int last_x=0, last_y=0;
+
+
+char *VIDEO_MEM = (char*) 0xb8000,
+     *VIDEO_PTR = (char*) 0xb8000,
+    VIDEO_CLR = 0x7;
+
+// Scrolling buffer 
+char upbuffer[_SCR_H][_SCR_W*2];
+char downbuffer[_SCR_H][_SCR_W*2];
+int is_scrolled=0;
+int is_shifted_once=0;
+unsigned int last_tab=0;
+int last_x=0, last_y=0;
+
+void _kputc(char c)
+{
+    /* Print a character on the screen*/
+  if (last_x && last_y) _kscrolldown ();
+  if(c=='\n')
+      _knewline();
+    else if(c=='\033') {
+      asm("nop");
+    } else if (c=='\t')
+      _ktab();
+    else if(c=='\b')
+      _kbackspace();
+    else if (c=='\r')
+      _kminline();
+    else {
+  *VIDEO_PTR++ = c;
+  *VIDEO_PTR++ = VIDEO_CLR;
+    }
+  _kshiftAll();
+  _ksetcursauto();            
+/*
+  while(c != 0) {
+	if ( c=='\n' )
+		_knewline();
+	else if ( c=='\t' )
+		_ktab();
+	//else if(c=='\033')
+	//	_kcolor(++c);	NON STAMPA CORRETTAMENTE I COLORI
+	else if( c=='\b' )
+		_kbackspace();
+	else if ( c=='\r' )
+		_kminline();
+	c++;
+  }
+*/
+}
+
+void _kputs(char *s)
+{
+  while(*s!=0) {
+    if(*s=='\n')
+      _knewline();
+    else if(*s=='\033') {
+      _kcolor(*++s);
+    } else if (*s=='\t')
+      _ktab();
+    else if(*s=='\b')
+      _kbackspace();
+    else if (*s=='\r')
+      _kminline();
+    else
+      _kputc(*s);
+    s++;
+  }
+}
+
+/*
+ * Change text colour
+ */
+void _kcolor(char color)
+{
+  VIDEO_CLR = color;
+}
+
+/*
+ * Pression of the backspace key
+ */
+void _kbackspace()
+{
+    if (last_tab) {
+      unsigned int i;
+      for (i = 0; i < 7; i++) {
+        VIDEO_PTR -= 2;
+        *VIDEO_PTR = 0x20;
+      }
+      last_tab--;
+    }
+    else if (shell_mess_line != _kgetline () || shell_mess_col < _kgetcolumn ()) {
+      VIDEO_PTR -= 2;
+      *VIDEO_PTR = 0x20; // delete the character
+    }
+}
+
+/*
+ * Pression of the TAB key
+ */
+void _ktab()
+{
+  VIDEO_PTR = VIDEO_PTR+(7*2);
+}
+
+/*
+ * Move the cursor at the position x, y on the screen
+ */
+void _kgoto(int x, int y)
+{
+  VIDEO_PTR = VIDEO_MEM + ((y * _SCR_W * 2) + (x * 2));
+  _ksetcursauto();
+}
+
+/*
+ * Needed to clear the screen
+ */
+void _kclear()
+{
+  int line, row;
+  line = 0;
+  row = 0;
+  VIDEO_PTR = VIDEO_MEM;
+
+  while(row < _SCR_H){
+    while(line < _SCR_W){
+      *VIDEO_PTR++ = ' ';
+      *VIDEO_PTR++ = 0x7;	
+      line++;
+    }
+    line=0;
+    row++;		
+  }	
+  
+  VIDEO_PTR = VIDEO_MEM;
+}
+
+/*
+ * Move to the following line (the effect of \n character)
+ */
+void _knewline()
+{	
+    VIDEO_PTR = VIDEO_MEM + ((((VIDEO_PTR - VIDEO_MEM) / (_SCR_W * 2)) + 1) * (_SCR_W * 2));
+    _kshiftAll();
+    _ksetcursauto();
+}
+
+/*
+ * Move to the up line (the effect of \n character)
+ */
+void _kminline()
+{	
+    VIDEO_PTR = VIDEO_MEM + ((((VIDEO_PTR - VIDEO_MEM) / (_SCR_W * 2)) - 1) * (_SCR_W * 2));
+    _knewline();
+    _kshiftAll();
+    _ksetcursauto();
+}
+/*
+ * Move the cursor to the correct position
+ */
+void _ksetcursor(unsigned int x, unsigned int y)
+{
+   asm(
+       "movl  %0, %%eax   \n"
+       "movl  %1, %%ebx   \n"
+       "movl  $0x50, %%ecx   \n"
+       "mul   %%ecx         \n"
+       "addl  %%ebx, %%eax   \n"
+       "movw  $0x03d4, %%dx  \n"
+       "pushl %%eax         \n"
+       "movb  $0x0f, %%al    \n"
+       "out   %%al, %%dx     \n"
+       "popl  %%eax         \n"
+       "movw  $0x03d5, %%dx  \n"
+       "out   %%al, %%dx     \n"
+       "shr   $0x08,%%eax      \n"
+       "pushl %%eax         \n"
+       "movw  $0x03d4, %%dx  \n"
+       "movb  $0x0e, %%al    \n"
+       "out   %%al, %%dx     \n"
+       "pop   %%eax         \n"
+       "movw  $0x03d5, %%dx  \n"
+       "out   %%al, %%dx     \n"
+      :
+      : "g" (x), "g" (y)
+      );
+}
+
+/*
+ * When something is written in another position, update the cursor
+ */
+void _ksetcursauto()
+{
+   _ksetcursor( ((VIDEO_PTR - VIDEO_MEM) / 2) / _SCR_W,
+                ((VIDEO_PTR - VIDEO_MEM) / 2) % _SCR_W );
+}
+
+/*
+ * Print [OK] at the current row and column 60
+ */
+void _kprintOK() {
+    _kgoto(60, _kgetline());
+    _kputs("\033\001 [\033\012OK\033\001]\033\007\n");
+    _kcolor(WHITE);
+}
+
+/*
+ * Get the current column number
+ */
+int _kgetcolumn()
+{
+  unsigned int column;
+  column = VIDEO_PTR - VIDEO_MEM;
+  column = (column % (_SCR_W*2));
+  return column/2;
+}
+
+/*
+ * Get the current row number
+ */
+int _kgetline()
+{
+  unsigned int linea;
+  linea = VIDEO_PTR - VIDEO_MEM;
+  linea = (linea / (_SCR_W*2));
+  return linea;
+}
+
+/*
+ * Convert a number into an hexadecimal string
+ */
+void _kntohex (char *buffer, unsigned int decnum)
+{
+  int shift=0;
+  unsigned int tempnum = decnum;
+
+  while (tempnum>=16) {
+    tempnum >>= 4;
+    shift++;
+  }
+
+  for (; shift>=0; shift--) {
+    tempnum = decnum;
+    tempnum >>= (4*shift);
+    tempnum &= 0xF;
+
+    if (tempnum<10)
+      *buffer++ = '0'+tempnum;
+    else
+      *buffer++ = 'A'+tempnum-10;
+  }
+  *buffer = '\0';
+}
+
+
+void _knntos(char *buffer, int num, int base){
+	int mod;
+  //int numval;
+  char *p, *pbase;
+
+  p = pbase = buffer;
+    
+	if(num<0) {		
+		num=(~num)+1;
+		*p++='-';
+		pbase++;
+	}
+    while(num > 0)
+    {
+      mod = num % base;
+      *p++ = mod + '0';
+      num = num / base;
+    }
+
+    *p-- = 0;
+    while(p > pbase)
+    {
+      char tmp;
+      tmp = *p;
+      *p = *pbase;
+      *pbase = tmp;
+    
+      p--; pbase++;
+    }
+}
+/** @author Lisa
+  * @version 1.0
+  * @param  buffer (char*) La stringa che contiene il numero
+  * @param  num Il numero da convertire (intero)
+  * @param  base la base numerica in cui convertire (per ora 0, 16,10)
+  *
+  * Move the number "num" into a string
+  */
+void _kntos(char *buffer, unsigned int num, int base)
+{
+  int mod;
+  //int numval;
+  char *p, *pbase;
+
+  p = pbase = buffer;
+
+  if (base==16)
+     _kntohex (buffer, num);
+  else {
+    if (num == 0)
+      *p++ = '0';
+	else if(num<0) {		
+		num=(~num)+1;
+		*p++='-';
+		pbase++;
+	}
+    while(num > 0)
+    {
+      mod = num % base;
+      *p++ = mod + '0';
+      num = num / base;
+    }
+
+    *p-- = 0;
+    while(p > pbase)
+    {
+      char tmp;
+      tmp = *p;
+      *p = *pbase;
+      *pbase = tmp;
+    
+      p--; pbase++;
+    }
+  }
+}
+
+/***************************************
+ *                                     *
+ * Functions regarding video scrolling *
+ *                                     *
+ **************************************/
+
+
+/*
+ * First the simplest one: when the cursor reaches the last position of the
+ * screen, the whole screen is shifted up by one line
+ */
+void _kshiftAll (void)
+{
+  char *i;
+  int index;
+
+  if (VIDEO_PTR >= VIDEO_MEM + ((_SCR_H) * _SCR_W * 2)) {
+
+    /*
+     * we save the line to be lost in a buffer
+     * this will be useful for scrolling
+     */
+    _krotate_buffer();
+    for (index=0; index < _SCR_W*2; index++)
+      upbuffer[_SCR_H-1][index] = *(VIDEO_MEM + index);
+
+    for (i=VIDEO_MEM ; i<= (VIDEO_MEM + ((_SCR_H) * _SCR_W * 2) + (_SCR_W * 2));i++)
+      *i = i[_SCR_W * 2];
+    VIDEO_PTR = VIDEO_MEM + ((((VIDEO_PTR - VIDEO_MEM) / (_SCR_W * 2)) - 1) * (_SCR_W * 2));
+    is_shifted_once=1;
+  }
+}
+
+/*
+ * The scrolling buffer is updated to contain the screen up the current one
+ * The oldest line is lost to make space for the new one
+ */
+void _krotate_buffer()
+{
+  int y=1;
+  int x=0;
+
+  for (y=1; y<_SCR_H; y++) {
+    for (x=0; x<_SCR_W*2; x++)
+      upbuffer[y-1][x] = upbuffer[y][x];
+  }
+}
+
+
+/*
+ * Called by the pression of the PAGEUP key
+ * The screen up the current one is printed and the current one is saved in
+ * downbuffer for being restored in future
+ */
+void _kscrollup ()
+{
+  int y=0, x=0;
+  char *ptr = VIDEO_MEM;
+
+  if (is_scrolled==1 || is_shifted_once==0)
+      return;
+
+  for (; y<_SCR_H;y++) {
+    for (x=0; x<_SCR_W*2; x++) {
+      downbuffer[y][x] = *ptr;
+      *ptr++ = upbuffer[y][x];
+    }
+  }
+  is_scrolled=1;
+  last_x = _kgetcolumn ();
+  last_y = _kgetline ();
+  _kgoto (_SCR_W, _SCR_H);
+}
+
+/*
+ * Called by the pression of the PAGEDOWN key
+ * The content of downbuffer (that is, the screen present when you pressed
+ * PAGEUP) is printed again
+ */
+void _kscrolldown ()
+{
+  int y=0, x=0;
+  char *ptr = VIDEO_MEM;
+
+  /*
+   * If PAGEUP hasn't been pressed, it's useless to go down, there is nothing
+   */
+  if (is_scrolled==0)
+    return;
+
+  for (y=0; y<_SCR_H;y++) {
+    for (x=0; x<_SCR_W*2; x++)
+      *ptr++ = downbuffer[y][x];
+  }
+  is_scrolled=0;
+  _kgoto (last_x, last_y);
+  last_x=0;
+  last_y=0;
+}
+
+/* EOF */
\ No newline at end of file
diff --git a/kernel/terminal/commands.c b/kernel/terminal/commands.c
new file mode 100644
index 0000000..94a5d06
--- /dev/null
+++ b/kernel/terminal/commands.c
@@ -0,0 +1,19 @@
+#include <io/video.h>
+
+#include "commands.h"
+
+void alogo(){
+    _kcolor(BRIGHT_GREEN);
+    printf("            _                                            _ \n");
+    printf("  /\\  /\\___(_)___  ___ _ __     /\\ /\\___ _ __ _ __   ___| |\n");
+    printf(" / /_/ / _ \\ / __|/ _ \\ '_ \\   / //_// _ \\ '__| '_ \\ / _ \\ |\n");
+    printf("/ __  /  __/ \\__ \\  __/ | | | / __ \\  __/ |  | | | |  __/ |\n");
+    printf("\\/ /_/ \\___|_|___/\\___|_| |_| \\/  \\/\\___|_|  |_| |_|\\___|_|");
+    _kcolor(WHITE);
+
+}
+
+
+void help(){
+
+}
\ No newline at end of file
diff --git a/kernel/terminal/commands.h b/kernel/terminal/commands.h
new file mode 100644
index 0000000..367aca9
--- /dev/null
+++ b/kernel/terminal/commands.h
@@ -0,0 +1,7 @@
+#ifndef _HEISEN_COMMANDS_H
+#define _HEISEN_COMMANDS_H
+
+extern void alogo();
+extern void whoami();
+
+#endif 
\ No newline at end of file
diff --git a/kernel/terminal/logo.txt b/kernel/terminal/logo.txt
new file mode 100644
index 0000000..a10e756
--- /dev/null
+++ b/kernel/terminal/logo.txt
@@ -0,0 +1,6 @@
+            _                                            _ 
+  /\  /\___(_)___  ___ _ __     /\ /\___ _ __ _ __   ___| |
+ / /_/ / _ \ / __|/ _ \ '_ \   / //_/ _ \ '__| '_ \ / _ \ |
+/ __  /  __/ \__ \  __/ | | | / __ \  __/ |  | | | |  __/ |
+\/ /_/ \___|_|___/\___|_| |_| \/  \/\___|_|  |_| |_|\___|_|
+                                                          
\ No newline at end of file
diff --git a/kernel/terminal/shell.c b/kernel/terminal/shell.c
new file mode 100644
index 0000000..b95894c
--- /dev/null
+++ b/kernel/terminal/shell.c
@@ -0,0 +1,24 @@
+#include <io/video.h>
+
+struct cmd shell_cmd[NUM_COM] = {
+ { "aalogo",   aalogo,    "  -Show an ascii art logo" },
+ { "clear",    _kclear,   "   Clear the screen" },
+ { "poweroff", poweroff,  "Turn off the machine" },
+ { "uname",    uname_cmd, "   Print kernel version, try uname --help for more info" },
+ { "credits",  credits,   " Show DreamOS credits" },
+ { "sleep",    sleep_cmd, "   Pause DreamOS for a particular number of seconds" },
+ { "cpuid",    cpuid, 	  "   Show cpu identification informations" },
+ { "date",     date, 	  "    Show date and time" },
+ { "echo",     echo, 	  "    Print some lines of text" },
+ { "help",     help,	  "    See the 'help' list to learn the DreamOS commands now available" },
+ { "answer",   answer,    "  42" },
+ { "drv_load", drv_load,  "Tool to load and kill drivers" },
+ { "ls",       ls,        "      Tool for listing dir - not complete-" },
+ { "cd",       cd,        "      Change dir - not complete-" },
+ { "whoami",   whoami,    "  Show the current user name" },
+ { "tester",   tester,    "  Try some functions, 'tester --help' for more info'" },
+ { "pwd",      pwd,       "     Print current working directory" },
+ { "more",     more,      "    Read content of a file" },
+ { "newfile",  newfile,	  "	Create a new file"},
+ { "ps", 	   ps,		  "	Show task list"},
+};
\ No newline at end of file
diff --git a/kernel/terminal/shell.h b/kernel/terminal/shell.h
new file mode 100644
index 0000000..f29110d
--- /dev/null
+++ b/kernel/terminal/shell.h
@@ -0,0 +1,36 @@
+#ifndef _HEISEN_TERMINAL_SHELL_H
+#define  _HEISEN_TERMINAL_SHELL_H
+
+
+#define USER_LEN 22
+#define CMD_LEN 256
+#define DESC_LEN 256
+#define CURPATH_LEN 256
+#define NUM_COM 22
+#define DEF_COM 18
+#define HST_LEN 10
+
+
+struct user_env{
+    char username[CMD_LEN];
+    char cur_path[CURPATH_LEN];
+	unsigned int uid;
+	unsigned int gid;
+};
+
+struct cmd {
+	char cmdname[CMD_LEN];
+	void (*h_func)(void);
+	char cmddesc[DESC_LEN];
+};
+
+extern struct cmd shell_cmd[NUM_COM];
+typedef struct user_env userenv_t;
+extern userenv_t current_user;
+void shell_init();
+int shell(void *);
+void history (char *);
+void history_start(void);
+void _getCommand(char *);
+
+#endif 
\ No newline at end of file
-- 
2.43.0

