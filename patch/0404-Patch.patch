From f1ed2a1c824e47f52308ce4ebf5c4c566773b218 Mon Sep 17 00:00:00 2001
From: Heisenberg <alimirmohammad.1386@gmail.com>
Date: Sun, 7 Apr 2024 21:29:16 -0400
Subject: [PATCH 404/493] Patch

---
 HeisenOs.cue                 |   3 +
 Makefile                     |  59 +++----
 apps/Makefile                |   5 +-
 apps/make.sh                 |   0
 kernel/arch/x86-pc/Makefile  | 316 +++++++++++++++++------------------
 kernel/arch/x86-pc/linker.ld |  84 ++++------
 kernel/linker.ld             |  57 +++----
 kernelz/src/boot/loader.s    |  30 ++--
 lib/libcactusos.a            | Bin 1326072 -> 1326072 bytes
 9 files changed, 267 insertions(+), 287 deletions(-)
 create mode 100644 HeisenOs.cue
 create mode 100755 apps/make.sh

diff --git a/HeisenOs.cue b/HeisenOs.cue
new file mode 100644
index 0000000..fe09b01
--- /dev/null
+++ b/HeisenOs.cue
@@ -0,0 +1,3 @@
+FILE "HeisenOs.bin" BINARY
+  TRACK 01 MODE1/2352
+  INDEX 01 00:00:00
diff --git a/Makefile b/Makefile
index 8cf99e9..3989f94 100644
--- a/Makefile
+++ b/Makefile
@@ -24,7 +24,7 @@
 #######################
 
 INCLUDEDIRS := kernelz/include
-QEMUOPTIONS := -boot d -device VGA,edid=on,xres=1024,yres=768 -trace events=../qemuTrace.txt -d cpu_reset #-readconfig qemu-usb-config.cfg -drive if=none,id=stick,file=disk.img -device usb-storage,bus=ehci.0,drive=stick
+QEMUOPTIONS := -boot d -device VGA,edid=on,xres=1024,yres=768  #-readconfig qemu-usb-config.cfg -drive if=none,id=stick,file=disk.img -device usb-storage,bus=ehci.0,drive=stick
 
 G++PARAMS := -m32 -g -D CACTUSOSKERNEL -I $(INCLUDEDIRS) -Wall -fno-omit-frame-pointer -fno-use-cxa-atexit -nostdlib -fno-builtin -fno-exceptions -fno-rtti -fno-leading-underscore -Wno-write-strings -fpermissive -Wno-unknown-pragmas
 GCCPARAMS := -m32 -g -D CACTUSOSKERNEL -I $(INCLUDEDIRS) -Wall -fno-omit-frame-pointer -nostdlib -fno-builtin -Wno-unknown-pragmas
@@ -76,41 +76,42 @@ $(KRNLOBJDIR)/%.o: $(KRNLSRCDIR)/%.asm
 
 
 
-CactusOS.bin: kernelz/linker.ld $(KRNLOBJS)
+HeisenOs.bin: kernelz/linker.ld $(KRNLOBJS)
 	i686-elf-ld $(LDPARAMS) -T $< -o $@ $(KRNLOBJS)
 
-CactusOS.iso: CactusOS.bin
+HeisenOs.iso: HeisenOs.bin
 	cd lib/ && $(MAKE)
 	cd apps/ && $(MAKE)
+	bchunk HeisenOs.bin HeisenOs.cue HeisenOs
 	
-	nm -a CactusOS.bin | sort -d > isofiles/debug.sym
-	cp -r isofiles/. iso
-	mkdir iso/boot
-	mkdir iso/boot/grub
-	cp CactusOS.bin iso/boot/CactusOS.bin
-	cp grub.cfg iso/boot/grub/grub.cfg
-	grub-mkrescue --output=CactusOS.iso iso
-	rm -rf iso
+	# nm -a HeisenOs.bin | sort -d > isofiles/debug.sym || true
+	# cp -r isofiles/. iso
+	# mkdir iso/boot
+	# mkdir iso/boot/grub
+	# cp HeisenOs.bin iso/boot/HeisenOs.bin
+	# cp grub.cfg iso/boot/grub/grub.cfg
+	# grub-mkrescue --output=HeisenOs.iso iso
+	# rm -rf iso
 
 .PHONY: clean qemu kdbg run filelist serialDBG qemuDBG fastApps
 clean:
-	rm -rf $(KRNLOBJDIR) CactusOS.bin CactusOS.iso
+	rm -rf $(KRNLOBJDIR) HeisenOs.bin HeisenOs01.iso
 	cd lib/ && $(MAKE) clean
 	cd apps/ && $(MAKE) clean
 	rm -rf isofiles/apps/*.bin
 	rm -rf isofiles/apps/*.sym
 
-qemu: CactusOS.iso
-	qemu-system-i386 -cdrom CactusOS.iso -serial stdio $(QEMUOPTIONS)
+qemu: HeisenOs.iso
+	qemu-system-i386 -cdrom HeisenOs01.iso -serial stdio $(QEMUOPTIONS)
 
-qemuDBG: CactusOS.iso
-	qemu-system-i386 -cdrom CactusOS.iso -serial stdio $(QEMUOPTIONS) -s -S &
+qemuDBG: HeisenOs.iso
+	qemu-system-i386 -cdrom HeisenOs.iso -serial stdio $(QEMUOPTIONS) -s -S &
 
-qemuGDB: CactusOS.iso
-	qemu-system-i386 -cdrom CactusOS.iso $(QEMUOPTIONS) -serial pty &
-	gdb -ex 'file CactusOS.bin' -ex 'target remote /dev/pts/1' -q
+qemuGDB: HeisenOs.iso
+	qemu-system-i386 -cdrom HeisenOs.iso $(QEMUOPTIONS) -serial pty &
+	gdb -ex 'file HeisenOs.bin' -ex 'target remote /dev/pts/1' -q
 
-run: CactusOS.iso
+run: HeisenOs.iso
 	vboxmanage startvm "CactusOS" -E VBOX_GUI_DBG_AUTO_SHOW=true -E VBOX_GUI_DBG_ENABLED=true &
 	rm "CactusOS.log"
 	echo "" > "CactusOS.log"
@@ -120,9 +121,9 @@ serialDBG:
 	gcc -o tools/serialDebugger/a.out tools/serialDebugger/main.c
 	sudo ./tools/serialDebugger/a.out
 
-kdbg: CactusOS.iso
-	qemu-system-i386 $(QEMUOPTIONS) -cdrom CactusOS.iso -serial stdio -s -S &
-	kdbg -r localhost:1234 CactusOS.bin
+kdbg: HeisenOs.iso
+	qemu-system-i386 $(QEMUOPTIONS) -cdrom HeisenOs.iso -serial stdio -s -S &
+	kdbg -r localhost:1234 HeisenOs.bin
 
 grub-core:
 	grub-mkimage -o isofiles/setup/core.img -O i386-pc -p="(hd0,msdos1)/boot/grub" --config=grubcore.cfg -v configfile biosdisk part_msdos fat normal multiboot echo
@@ -132,23 +133,23 @@ fastApps:
 	rm -rf isofiles/apps/*.bin
 	cd lib/ && $(MAKE) clean && $(MAKE)
 	cd apps/ && $(MAKE) clean && $(MAKE)
-	rm CactusOS.iso
+	rm HeisenOs.iso
 
 turboApps:
 	rm -rf isofiles/apps/*.bin
 	cd apps/ && $(MAKE) clean && $(MAKE)
-	rm CactusOS.iso
+	rm HeisenOs.iso
 
-installUSB: CactusOS.iso CactusOS.bin isofiles/debug.sym isofiles/apps
+installUSB: HeisenOs.iso HeisenOs.bin isofiles/debug.sym isofiles/apps
 	rm -rf /media/remco/ISOIMAGE/apps/*.bin
 	cp -r isofiles/apps/* /media/remco/ISOIMAGE/apps/
 	cp isofiles/debug.sym /media/remco/ISOIMAGE/debug.sym
-	cp CactusOS.bin /media/remco/ISOIMAGE/boot/CactusOS.bin
+	cp HeisenOs.bin /media/remco/ISOIMAGE/boot/HeisenOs.bin
 	umount /media/remco/ISOIMAGE
 
-debug: CactusOS.iso
+debug: HeisenOs.iso
 	pyuic5 tools/advancedDebugger/mainGUI.ui -o tools/advancedDebugger/mainWindow.py
-	qemu-system-i386 -cdrom CactusOS.iso $(QEMUOPTIONS) -serial pty &
+	qemu-system-i386 -cdrom HeisenOs.iso $(QEMUOPTIONS) -serial pty &
 	/usr/bin/python3 tools/advancedDebugger/main.py
 
 
diff --git a/apps/Makefile b/apps/Makefile
index e021986..7774c06 100644
--- a/apps/Makefile
+++ b/apps/Makefile
@@ -21,10 +21,11 @@ OBJFILES := $(patsubst %.cpp,%.o,$(patsubst %.s,%.o,$(patsubst %.asm,%.o,$(patsu
 all: linker.ld $(LIBFILE) $(OBJFILES)
 	for app in $(APPS) ; do \
 		echo building $$app.bin to $(APPOUT)/$$app.bin; \
-    	i686-elf-ld $(LDPARAMS) -T $< -o $(APPOUT)/$$app.bin $$app/*.o -L$(LIBDIR) --library=cactusos; \
-		nm -a $(APPOUT)/$$app.bin | sort -d > $(APPOUT)/$$app.sym; \
+    	i686-elf-ld $(LDPARAMS) -T $< -o $(APPOUT)/$$app.bin $(filter $(APPDIR)/$$app/%.o,$(OBJFILES)) -L$(LIBDIR) --library=cactusos; \
+		nm -a $(APPOUT)/$$app.bin | sort -d > $(APPOUT)/$$app.sym || true; \
 	done
 
+
 clean:
 	rm -rf $(OBJFILES) $(LIBFILE)
 
diff --git a/apps/make.sh b/apps/make.sh
new file mode 100755
index 0000000..e69de29
diff --git a/kernel/arch/x86-pc/Makefile b/kernel/arch/x86-pc/Makefile
index eeef38d..348e69f 100644
--- a/kernel/arch/x86-pc/Makefile
+++ b/kernel/arch/x86-pc/Makefile
@@ -1,159 +1,159 @@
-# The makefile for the CactusOS project, this file will get more complicated when the OS is in a later stage of development.
-
-##########
-# .s files are GAS assembly
-# .asm files are nasm assembly
-##########
-#####################
-#xHCI
-# nec-usb-xhci
-# qemu-xhci
-#EHCI
-# usb-ehci
-# ich9-usb-ehci1
-#UHCI
-# ich9-usb-uhci1
-# ich9-usb-uhci2
-# ich9-usb-uhci3
-# piix3-usb-uhci
-# piix4-usb-uhci
-# vt82c686b-usb-uhci
-#OHCI
-# sysbus-ohci
-# pci-ohci
-#######################
-
-INCLUDEDIRS := kernel/include
-QEMUOPTIONS := -boot d -device VGA,edid=on,xres=1024,yres=768 -trace events=../qemuTrace.txt -d cpu_reset #-readconfig qemu-usb-config.cfg -drive if=none,id=stick,file=disk.img -device usb-storage,bus=ehci.0,drive=stick
-
-G++PARAMS := -m32 -g -D CACTUSOSKERNEL -I $(INCLUDEDIRS) -Wall -fno-omit-frame-pointer -fno-use-cxa-atexit -nostdlib -fno-builtin -fno-exceptions -fno-rtti -fno-leading-underscore -Wno-write-strings -fpermissive -Wno-unknown-pragmas
-GCCPARAMS := -m32 -g -D CACTUSOSKERNEL -I $(INCLUDEDIRS) -Wall -fno-omit-frame-pointer -nostdlib -fno-builtin -Wno-unknown-pragmas
-ASPARAMS := --32
-LDPARAMS := -m elf_i386
-
-KRNLSRCDIR := gui
-KRNLOBJDIR := kernel/obj
-
-KRNLFILES := $(shell find $(KRNLSRCDIR) -type f \( -name \*.cpp -o -name \*.s -o -name \*.asm -o -name \*.c \)) #Find all the files that end with .cpp/.s/.asm/.c
-KRNLOBJS := $(patsubst %.cpp,%.o,$(patsubst %.s,%.o,$(patsubst %.asm,%.o,$(patsubst %.c,%.o,$(KRNLFILES))))) #Replace the .cpp/.s/.asm/.c extension with .o
-KRNLOBJS := $(subst $(KRNLSRCDIR),$(KRNLOBJDIR),$(KRNLOBJS)) #Replace the kernel/src part with kernel/obj
-
-
-####################################
-#C++ source files
-####################################
-$(KRNLOBJDIR)/%.o: $(KRNLSRCDIR)/%.cpp
-	mkdir -p $(@D)
-	i686-elf-g++ $(G++PARAMS) -c -o $@ $<
-
-####################################
-#C source files
-####################################
-$(KRNLOBJDIR)/%.o: $(KRNLSRCDIR)/%.c
-	mkdir -p $(@D)
-	i686-elf-gcc $(GCCPARAMS) -c -o $@ $<
-
-####################################
-#GDB Stub
-####################################
-$(KRNLOBJDIR)/gdb/i386-stub.o: $(KRNLSRCDIR)/gdb/i386-stub.c
-	mkdir -p $(@D)
-	i686-elf-gcc $(GCCPARAMS) -fleading-underscore -c -o $@ $<
-
-####################################
-#GAS assembly files
-####################################
-$(KRNLOBJDIR)/%.o: $(KRNLSRCDIR)/%.s
-	mkdir -p $(@D)
-	i686-elf-as $(ASPARAMS) -o $@ $<
-
-####################################
-#NASM assembly files
-####################################
-$(KRNLOBJDIR)/%.o: $(KRNLSRCDIR)/%.asm
-	mkdir -p $(@D)
-	nasm -f elf32 -O0 $< -o $@
-
-
-
-CactusOS.bin: kernel/linker.ld $(KRNLOBJS)
-	i686-elf-ld $(LDPARAMS) -T $< -o $@ $(KRNLOBJS)
-
-CactusOS.iso: CactusOS.bin
-	cd lib/ && $(MAKE)
-	cd apps/ && $(MAKE)
+# # The makefile for the CactusOS project, this file will get more complicated when the OS is in a later stage of development.
+
+# ##########
+# # .s files are GAS assembly
+# # .asm files are nasm assembly
+# ##########
+# #####################
+# #xHCI
+# # nec-usb-xhci
+# # qemu-xhci
+# #EHCI
+# # usb-ehci
+# # ich9-usb-ehci1
+# #UHCI
+# # ich9-usb-uhci1
+# # ich9-usb-uhci2
+# # ich9-usb-uhci3
+# # piix3-usb-uhci
+# # piix4-usb-uhci
+# # vt82c686b-usb-uhci
+# #OHCI
+# # sysbus-ohci
+# # pci-ohci
+# #######################
+
+# INCLUDEDIRS := kernel/include
+# QEMUOPTIONS := -boot d -device VGA,edid=on,xres=1024,yres=768 -trace events=../qemuTrace.txt -d cpu_reset #-readconfig qemu-usb-config.cfg -drive if=none,id=stick,file=disk.img -device usb-storage,bus=ehci.0,drive=stick
+
+# G++PARAMS := -m32 -g -D CACTUSOSKERNEL -I $(INCLUDEDIRS) -Wall -fno-omit-frame-pointer -fno-use-cxa-atexit -nostdlib -fno-builtin -fno-exceptions -fno-rtti -fno-leading-underscore -Wno-write-strings -fpermissive -Wno-unknown-pragmas
+# GCCPARAMS := -m32 -g -D CACTUSOSKERNEL -I $(INCLUDEDIRS) -Wall -fno-omit-frame-pointer -nostdlib -fno-builtin -Wno-unknown-pragmas
+# ASPARAMS := --32
+# LDPARAMS := -m elf_i386
+
+# KRNLSRCDIR := gui
+# KRNLOBJDIR := kernel/obj
+
+# KRNLFILES := $(shell find $(KRNLSRCDIR) -type f \( -name \*.cpp -o -name \*.s -o -name \*.asm -o -name \*.c \)) #Find all the files that end with .cpp/.s/.asm/.c
+# KRNLOBJS := $(patsubst %.cpp,%.o,$(patsubst %.s,%.o,$(patsubst %.asm,%.o,$(patsubst %.c,%.o,$(KRNLFILES))))) #Replace the .cpp/.s/.asm/.c extension with .o
+# KRNLOBJS := $(subst $(KRNLSRCDIR),$(KRNLOBJDIR),$(KRNLOBJS)) #Replace the kernel/src part with kernel/obj
+
+
+# ####################################
+# #C++ source files
+# ####################################
+# $(KRNLOBJDIR)/%.o: $(KRNLSRCDIR)/%.cpp
+# 	mkdir -p $(@D)
+# 	i686-elf-g++ $(G++PARAMS) -c -o $@ $<
+
+# ####################################
+# #C source files
+# ####################################
+# $(KRNLOBJDIR)/%.o: $(KRNLSRCDIR)/%.c
+# 	mkdir -p $(@D)
+# 	i686-elf-gcc $(GCCPARAMS) -c -o $@ $<
+
+# ####################################
+# #GDB Stub
+# ####################################
+# $(KRNLOBJDIR)/gdb/i386-stub.o: $(KRNLSRCDIR)/gdb/i386-stub.c
+# 	mkdir -p $(@D)
+# 	i686-elf-gcc $(GCCPARAMS) -fleading-underscore -c -o $@ $<
+
+# ####################################
+# #GAS assembly files
+# ####################################
+# $(KRNLOBJDIR)/%.o: $(KRNLSRCDIR)/%.s
+# 	mkdir -p $(@D)
+# 	i686-elf-as $(ASPARAMS) -o $@ $<
+
+# ####################################
+# #NASM assembly files
+# ####################################
+# $(KRNLOBJDIR)/%.o: $(KRNLSRCDIR)/%.asm
+# 	mkdir -p $(@D)
+# 	nasm -f elf32 -O0 $< -o $@
+
+
+
+# CactusOS.bin: kernel/linker.ld $(KRNLOBJS)
+# 	i686-elf-ld $(LDPARAMS) -T $< -o $@ $(KRNLOBJS)
+
+# CactusOS.iso: CactusOS.bin
+# 	cd lib/ && $(MAKE)
+# 	cd apps/ && $(MAKE)
 	
-	nm -a CactusOS.bin | sort -d > isofiles/debug.sym
-	cp -r isofiles/. iso
-	mkdir iso/boot
-	mkdir iso/boot/grub
-	cp CactusOS.bin iso/boot/CactusOS.bin
-	cp grub.cfg iso/boot/grub/grub.cfg
-	grub-mkrescue --output=CactusOS.iso iso
-	rm -rf iso
-
-.PHONY: clean qemu kdbg run filelist serialDBG qemuDBG fastApps
-clean:
-	rm -rf $(KRNLOBJDIR) CactusOS.bin CactusOS.iso
-	cd lib/ && $(MAKE) clean
-	cd apps/ && $(MAKE) clean
-	rm -rf isofiles/apps/*.bin
-	rm -rf isofiles/apps/*.sym
-
-qemu: CactusOS.iso
-	qemu-system-i386 -cdrom CactusOS.iso -serial stdio $(QEMUOPTIONS)
-
-qemuDBG: CactusOS.iso
-	qemu-system-i386 -cdrom CactusOS.iso -serial stdio $(QEMUOPTIONS) -s -S &
-
-qemuGDB: CactusOS.iso
-	qemu-system-i386 -cdrom CactusOS.iso $(QEMUOPTIONS) -serial pty &
-	gdb -ex 'file CactusOS.bin' -ex 'target remote /dev/pts/1' -q
-
-run: CactusOS.iso
-	vboxmanage startvm "CactusOS" -E VBOX_GUI_DBG_AUTO_SHOW=true -E VBOX_GUI_DBG_ENABLED=true &
-	rm "CactusOS.log"
-	echo "" > "CactusOS.log"
-	tail -f "CactusOS.log"
-
-serialDBG:
-	gcc -o tools/serialDebugger/a.out tools/serialDebugger/main.c
-	sudo ./tools/serialDebugger/a.out
-
-kdbg: CactusOS.iso
-	qemu-system-i386 $(QEMUOPTIONS) -cdrom CactusOS.iso -serial stdio -s -S &
-	kdbg -r localhost:1234 CactusOS.bin
-
-grub-core:
-	grub-mkimage -o isofiles/setup/core.img -O i386-pc -p="(hd0,msdos1)/boot/grub" --config=grubcore.cfg -v configfile biosdisk part_msdos fat normal multiboot echo
-
-# Only rebuild LIBCactusOS and the apps without recompiling the kernel
-fastApps:
-	rm -rf isofiles/apps/*.bin
-	cd lib/ && $(MAKE) clean && $(MAKE)
-	cd apps/ && $(MAKE) clean && $(MAKE)
-	rm CactusOS.iso
-
-turboApps:
-	rm -rf isofiles/apps/*.bin
-	cd apps/ && $(MAKE) clean && $(MAKE)
-	rm CactusOS.iso
-
-installUSB: CactusOS.iso CactusOS.bin isofiles/debug.sym isofiles/apps
-	rm -rf /media/remco/ISOIMAGE/apps/*.bin
-	cp -r isofiles/apps/* /media/remco/ISOIMAGE/apps/
-	cp isofiles/debug.sym /media/remco/ISOIMAGE/debug.sym
-	cp CactusOS.bin /media/remco/ISOIMAGE/boot/CactusOS.bin
-	umount /media/remco/ISOIMAGE
-
-debug: CactusOS.iso
-	pyuic5 tools/advancedDebugger/mainGUI.ui -o tools/advancedDebugger/mainWindow.py
-	qemu-system-i386 -cdrom CactusOS.iso $(QEMUOPTIONS) -serial pty &
-	/usr/bin/python3 tools/advancedDebugger/main.py
-
-
-filelist:
-	@echo "Source Files:"
-	@echo -$(KRNLFILES)
-	@echo "Object Files:"
-	@echo -$(KRNLOBJS)
\ No newline at end of file
+# 	nm -a CactusOS.bin | sort -d > isofiles/debug.sym
+# 	cp -r isofiles/. iso
+# 	mkdir iso/boot
+# 	mkdir iso/boot/grub
+# 	cp CactusOS.bin iso/boot/CactusOS.bin
+# 	cp grub.cfg iso/boot/grub/grub.cfg
+# 	grub-mkrescue --output=CactusOS.iso iso
+# 	rm -rf iso
+
+# .PHONY: clean qemu kdbg run filelist serialDBG qemuDBG fastApps
+# clean:
+# 	rm -rf $(KRNLOBJDIR) CactusOS.bin CactusOS.iso
+# 	cd lib/ && $(MAKE) clean
+# 	cd apps/ && $(MAKE) clean
+# 	rm -rf isofiles/apps/*.bin
+# 	rm -rf isofiles/apps/*.sym
+
+# qemu: CactusOS.iso
+# 	qemu-system-i386 -cdrom CactusOS.iso -serial stdio $(QEMUOPTIONS)
+
+# qemuDBG: CactusOS.iso
+# 	qemu-system-i386 -cdrom CactusOS.iso -serial stdio $(QEMUOPTIONS) -s -S &
+
+# qemuGDB: CactusOS.iso
+# 	qemu-system-i386 -cdrom CactusOS.iso $(QEMUOPTIONS) -serial pty &
+# 	gdb -ex 'file CactusOS.bin' -ex 'target remote /dev/pts/1' -q
+
+# run: CactusOS.iso
+# 	vboxmanage startvm "CactusOS" -E VBOX_GUI_DBG_AUTO_SHOW=true -E VBOX_GUI_DBG_ENABLED=true &
+# 	rm "CactusOS.log"
+# 	echo "" > "CactusOS.log"
+# 	tail -f "CactusOS.log"
+
+# serialDBG:
+# 	gcc -o tools/serialDebugger/a.out tools/serialDebugger/main.c
+# 	sudo ./tools/serialDebugger/a.out
+
+# kdbg: CactusOS.iso
+# 	qemu-system-i386 $(QEMUOPTIONS) -cdrom CactusOS.iso -serial stdio -s -S &
+# 	kdbg -r localhost:1234 CactusOS.bin
+
+# grub-core:
+# 	grub-mkimage -o isofiles/setup/core.img -O i386-pc -p="(hd0,msdos1)/boot/grub" --config=grubcore.cfg -v configfile biosdisk part_msdos fat normal multiboot echo
+
+# # Only rebuild LIBCactusOS and the apps without recompiling the kernel
+# fastApps:
+# 	rm -rf isofiles/apps/*.bin
+# 	cd lib/ && $(MAKE) clean && $(MAKE)
+# 	cd apps/ && $(MAKE) clean && $(MAKE)
+# 	rm CactusOS.iso
+
+# turboApps:
+# 	rm -rf isofiles/apps/*.bin
+# 	cd apps/ && $(MAKE) clean && $(MAKE)
+# 	rm CactusOS.iso
+
+# installUSB: CactusOS.iso CactusOS.bin isofiles/debug.sym isofiles/apps
+# 	rm -rf /media/remco/ISOIMAGE/apps/*.bin
+# 	cp -r isofiles/apps/* /media/remco/ISOIMAGE/apps/
+# 	cp isofiles/debug.sym /media/remco/ISOIMAGE/debug.sym
+# 	cp CactusOS.bin /media/remco/ISOIMAGE/boot/CactusOS.bin
+# 	umount /media/remco/ISOIMAGE
+
+# debug: CactusOS.iso
+# 	pyuic5 tools/advancedDebugger/mainGUI.ui -o tools/advancedDebugger/mainWindow.py
+# 	qemu-system-i386 -cdrom CactusOS.iso $(QEMUOPTIONS) -serial pty &
+# 	/usr/bin/python3 tools/advancedDebugger/main.py
+
+
+# filelist:
+# 	@echo "Source Files:"
+# 	@echo -$(KRNLFILES)
+# 	@echo "Object Files:"
+# 	@echo -$(KRNLOBJS)
\ No newline at end of file
diff --git a/kernel/arch/x86-pc/linker.ld b/kernel/arch/x86-pc/linker.ld
index 1ee9599..cb24bbd 100644
--- a/kernel/arch/x86-pc/linker.ld
+++ b/kernel/arch/x86-pc/linker.ld
@@ -1,57 +1,31 @@
-ENTRY (multiboot_entry)
-OUTPUT_FORMAT(elf32-i386)
-
-
+ENTRY(_start)
 SECTIONS
 {
-    /* Einherjar is loaded at 0x00100000.
-	A multi-boot compatible kernel cannot be loaded before the 1MB mark,
-	it must be loaded at or above 1MB. */
-    . = 0x00100000;
-
-    .multiboot :
-    {
-        /* The multiboot header must come within the first 8K of
-	our kernel  */
-	*(.multiboot);
-
-	/* 32 bit aligned as required by the multiboot specs */
-	LONG(0);
-    }
-    . = ALIGN(0x1000);
-    /** Start of the kernel */
-    __kernel_start = .;
-
-    .text ALIGN (0x1000) :
-    {
-        *(.text)
-    }
-
-    .rodata ALIGN (0x1000) :
-    {
-        *(.rodata*)
-    }
-
-    .data ALIGN (0x1000) :
-    {
-        *(.data)
-    }
-
-    .bss :
-    {
-        sbss = .;
-        *(COMMON)
-        *(.bss)
-        ebss = .;
-    }
-
-    /* Define sections to fulfill unresolved references */
-    .unresolved :
-    {
-        /* Define symbols to fulfill unresolved references */
-        PROVIDE (_dummy_symbol = 0); /* Replace _dummy_symbol with the actual symbol name */
-    }
-
-    /* End of the kernel */
-    __kernel_end = .;
-}
+	. = 8M;
+	.text BLOCK(4K) : ALIGN(4K)
+	{
+		*(.text)
+	}
+	.rodata BLOCK(4K) : ALIGN(4K)
+	{
+		start_ctors = .;
+        *(SORT(.ctors*))  /* Note the "SORT" */
+        end_ctors = .;
+
+        start_dtors = .;
+        *(SORT(.dtors*))
+        end_dtors = .;
+
+		*(.rodata)
+	}
+	.data BLOCK(4K) : ALIGN(4K)
+	{
+		*(.data)
+	}
+	.bss BLOCK(4K) : ALIGN(4K)
+	{
+		*(COMMON)
+		*(.bss)
+		*(.bootstrap_stack)
+	}
+} 
\ No newline at end of file
diff --git a/kernel/linker.ld b/kernel/linker.ld
index f5937b6..cb24bbd 100644
--- a/kernel/linker.ld
+++ b/kernel/linker.ld
@@ -1,30 +1,31 @@
-ENTRY (loader)
+ENTRY(_start)
+SECTIONS
+{
+	. = 8M;
+	.text BLOCK(4K) : ALIGN(4K)
+	{
+		*(.text)
+	}
+	.rodata BLOCK(4K) : ALIGN(4K)
+	{
+		start_ctors = .;
+        *(SORT(.ctors*))  /* Note the "SORT" */
+        end_ctors = .;
 
-SECTIONS {
-    . = 0x100000;
-    
-    kernel_start = .;
-    
-    .mbheader : {
-        *(.mbheader)
-    }
+        start_dtors = .;
+        *(SORT(.dtors*))
+        end_dtors = .;
 
-    .text : {
-        *(.text)
-    }
-
-    .rodata ALIGN (0x1000) : {
-        *(.rodata)
-    }
-
-    .data ALIGN (0x1000) : {
-        *(.data)
-    }
-
-    .bss ALIGN (0x1000) : {
-        *(COMMON)
-        *(.bss)
-    }
-    
-    kernel_end = .;
-}
\ No newline at end of file
+		*(.rodata)
+	}
+	.data BLOCK(4K) : ALIGN(4K)
+	{
+		*(.data)
+	}
+	.bss BLOCK(4K) : ALIGN(4K)
+	{
+		*(COMMON)
+		*(.bss)
+		*(.bootstrap_stack)
+	}
+} 
\ No newline at end of file
diff --git a/kernelz/src/boot/loader.s b/kernelz/src/boot/loader.s
index 5129c8c..6b8919b 100644
--- a/kernelz/src/boot/loader.s
+++ b/kernelz/src/boot/loader.s
@@ -1,8 +1,8 @@
-.set ALIGN,    1<<0             
-.set MEMINFO,  1<<1             
-.set FLAGS,    ALIGN | MEMINFO  
-.set MAGIC,    0x1BADB002       
-.set CHECKSUM, -(MAGIC + FLAGS) 
+.set ALIGN,    1<<0             # align loaded modules on page boundaries
+.set MEMINFO,  1<<1             # provide memory map
+.set FLAGS,    ALIGN | MEMINFO  # this is the Multiboot 'flag' field
+.set MAGIC,    0x1BADB002       # 'magic number' lets bootloader find the header
+.set CHECKSUM, -(MAGIC + FLAGS) # checksum of above, to prove we are multiboot
 
 .section .multiboot
 	.align 4
@@ -15,7 +15,7 @@
 
 .section .bootstrap_stack, "aw", @nobits
 stack_bottom:
-.skip 16384 
+.skip 16384 # 16 KiB
 .global stack_top
 stack_top:
 
@@ -23,18 +23,18 @@ stack_top:
 .align 0x1000
 .global BootPageDirectory
 BootPageDirectory:
-	
+	# identity map the first 4 MB
 	.long 0x00000083
 	
-	
+	# pages before kernel
 	.rept (KERNEL_PAGE_NUMBER - 1)
 	.long 0
 	.endr
 	
-	
+	# this page contains the kernel
 	.long 0x00000083
 
-	
+	# pages after kernel
 	.rept (1024 - KERNEL_PAGE_NUMBER - 1)
 	.long 0
 	.endr
@@ -52,27 +52,27 @@ _entrypoint:
 	mov $(BootPageDirectory - KERNEL_VIRTUAL_BASE), %ecx
 	mov %ecx, %cr3
 
-	
+	# enable 4 mb pages
 	mov %cr4, %ecx
 	or $0x00000010, %ecx
 	mov %ecx, %cr4
 
-	
+	# enable paging
 	mov %cr0, %ecx
 	or $0x80000001, %ecx
 	mov %ecx, %cr0
 
-	
+	# jump to higher half code
 	lea 4f, %ecx
 	jmp *%ecx
 
 4:
-	
+	# Unmap the identity-mapped pages
 	movl $0, BootPageDirectory
 	invlpg 0
 
 	movl $stack_top, %esp
-	
+	# Mark end of call stack for unwinding
 	movl $0, %ebp
 
 	add $KERNEL_VIRTUAL_BASE, %ebx
diff --git a/lib/libcactusos.a b/lib/libcactusos.a
index 37086f1c1c332eea233fb4fc60e397a41c9fc956..5148ef8a0e80353a352866f51e8255f69d4fc3aa 100644
GIT binary patch
delta 643
zcmezIJ>bXpfC;j!#+HVLW*e2_9l<Q)$$e|YHqUXqDviYLiIo(Fa@XAy-+Zv(gf)b_
zxo^#OW+a6P8<rw-6}BL8#Wz3PenJtdZ{5voQx=fT(*rdaCAORLGw$F6^S6JLWsKp1
zFo9A>_#vu*qT=la7L3~sESTOVfyLStXEOmYGZ3=?G3$24*=#PN5amEA@$C&8*dmSL
ze2MK}AG2MEhx5g^KX7J0XoSSyQ^tN$AI_K9zHk|PM=G2zzTJg~Bk((%FR^_iGbax>
zoG-rp1|O%d0utXrpVRd@5`Tdh*W7z>zQp#(uUs(+aK8BV3!&Vl0!aLXH10^K_rd<T
zQp&9<hLCTU=;7Wj(Zll+YQ{l6PVwzBZ+TLob};sEOSI2D&AWZ>X}*+Zh(3rKfBvnL
z5d8Kx5Bayhc_<JI^&41C%1uGrzYsN!U%4c<@4Y5;BL$&n`vz-aLnb8tA6wx{9VGsQ
YEMdkTB>tLj!i><k0Goe8Q^Y_B0Lv=Pi2wiq

delta 650
zcmezIJ>bXpfC;j!My7@q<{Opb9a%uE=^teo#W&A!yef^v?TM8XM&ceQIBAW<U9x5&
zGZHsp!%}3f!WI<ngY733krW@f8EOjQ25K-$Y&Yd++`$LtZwI;~h6}<3N*&>csABBl
zmTWh&VBBtG!Sp%_EY_|#n+b@SftUq|S+^_BW^)mRC<jW3Z*SPZ7HJIOZ`2eK-~Qz>
z+r@Y!{sU+BgGNaFJ!R}C^^y1sma%uHBJo{#I0C;T@i#DY@^T~bZ}4&YDj@M4^f_Ih
zBk>oAam~Gl#E<yO6`KI(OKiUw%3UG==ZkMoNaK!#dLQimE2Z3;VhH(mi5~9l5<NUG
z5oU;QmwC&RieyLooYTD9=bYwCZH7embUA)tXv_KYZ=M7Zn7r<$c>CLj{M+9?6o~l_
z5!>!}Q!w~1RKvZ;Y~tJZUK6^J0u|U-$}PTqqqVRB6T*b;e{F>;bf5}=R){a3m?hi;
YmzUVS?wjy`BPhRbjo9`Rnj!{50ILerZvX%Q

-- 
2.43.0

