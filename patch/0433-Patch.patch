From 857e4491d0f74e7134d2f6422544776ba48d131b Mon Sep 17 00:00:00 2001
From: Heisenberg <alimirmohammad.1386@gmail.com>
Date: Mon, 8 Apr 2024 21:38:02 -0400
Subject: [PATCH 433/493] Patch

---
 drivers/Makefile             |  77 +++----
 drivers/usb3/driver_pl2303.c |   0
 drivers/usb3/driver_silabs.c |   1 +
 include/sys/cdefs.h          | 413 +++++++++++++++++++++++++++++++++++
 kernel/include/stdint.h      | 231 ++++++++++++++++++++
 libdrive/include/cdefs.h     |   2 +
 libdrive/include/stdint.h    | 231 ++++++++++++++++++++
 7 files changed, 917 insertions(+), 38 deletions(-)
 create mode 100644 drivers/usb3/driver_pl2303.c
 create mode 100644 include/sys/cdefs.h
 create mode 100644 kernel/include/stdint.h
 create mode 100644 libdrive/include/cdefs.h
 create mode 100644 libdrive/include/stdint.h

diff --git a/drivers/Makefile b/drivers/Makefile
index e4a631a..4837300 100644
--- a/drivers/Makefile
+++ b/drivers/Makefile
@@ -1,50 +1,51 @@
-# CONFIG = ../makefile.config
-# include ${CONFIG}
+CONFIG = ../makefile.config
+include ${CONFIG}
 
-# LIBINCLUDE := ../lib/include
-# LIBDIR := ../lib
-# LIBFILE := ../lib/libcactusos.a
-# DEBUG := -g
-# LIBDRIVEINCLUDE = ../libdrive/include
+LIBINCLUDE := ../lib/include
+LIBDIR := ../lib
+LIBFILE := ../lib/libcactusos.a
+DEBUG := -g
+LIBDRIVEINCLUDE = ../libdrive/include
 
-# G++PARAMS := -m32 $(DEBUG) -I $(LIBINCLUDE) $(OPTIMIZE_FLAGS) -I $(LIBDRIVEINCLUDE) -Wall -fno-omit-frame-pointer -fno-use-cxa-atexit -nostdlib -fno-builtin -fno-exceptions -fno-rtti -fno-leading-underscore -Wno-write-strings -fpermissive -Wno-unknown-pragmas
-# GCCPARAMS := -m32 $(DEBUG) -I $(LIBINCLUDE) $(OPTIMIZE_FLAGS) -I $(LIBDRIVEINCLUDE) -Wall -fno-omit-frame-pointer -nostdlib -fno-builtin -fleading-underscore -Wno-unknown-pragmas
-# LDPARAMS := -m elf_i386
 
-# USB_DIR := usb3
-# APPOUT := ../isofiles/apps
+G++PARAMS := -m32 $(DEBUG) -I $(LIBINCLUDE) $(OPTIMIZE_FLAGS) -I $(LIBDRIVEINCLUDE) -I ../kernel/include -Wall -fno-omit-frame-pointer -fno-use-cxa-atexit -nostdlib -fno-builtin -fno-exceptions -fno-rtti -fno-leading-underscore -Wno-write-strings -fpermissive -Wno-unknown-pragmas
+GCCPARAMS := -m32 $(DEBUG) -I $(LIBINCLUDE) $(OPTIMIZE_FLAGS) -I $(LIBDRIVEINCLUDE) -I ../kernel/include -Wall -fno-omit-frame-pointer -nostdlib -fno-builtin -fleading-underscore -Wno-unknown-pragmas
+LDPARAMS := -m elf_i386
 
-# SRCFILES := $(shell find $(USB_DIR) -type f \( -name \*.cpp -o -name \*.s -o -name \*.asm -o -name \*.c \)) #Find all the files in usb3 that end with .cpp/.s/.asm/.c
-# OBJFILES := $(patsubst %.cpp,%.o,$(patsubst %.s,%.o,$(patsubst %.asm,%.o,$(patsubst %.c,%.o,$(SRCFILES))))) #Replace the .cpp/.s/.asm/.c extension with .o
+USB_DIR := usb3
+APPOUT := ../isofiles/apps
 
-# .PHONY: all clean
+SRCFILES := $(shell find $(USB_DIR) -type f \( -name \*.cpp -o -name \*.s -o -name \*.asm -o -name \*.c \)) #Find all the files in usb3 that end with .cpp/.s/.asm/.c
+OBJFILES := $(patsubst %.cpp,%.o,$(patsubst %.s,%.o,$(patsubst %.asm,%.o,$(patsubst %.c,%.o,$(SRCFILES))))) #Replace the .cpp/.s/.asm/.c extension with .o
 
-# all: linker.ld $(LIBFILE) $(OBJFILES)
-# 	for app in $(USB_DIR) ; do \
-# 		echo building $$app.bin to $(APPOUT)/$$app.bin; \
-#     	i686-elf-ld $(LDPARAMS) -T $< -o $(APPOUT)/$$app.bin $$app/*.o -L$(LIBDIR) --library=cactusos; \
-# 		nm -a $(APPOUT)/$$app.bin | sort -d > $(APPOUT)/$$app.sym; \
-# 	done
+.PHONY: all clean
 
-# clean:
-# 	rm -rf $(OBJFILES) $(LIBFILE)
+all: linker.ld $(LIBFILE) $(OBJFILES)
+	for app in $(USB_DIR) ; do \
+		echo building $$app.bin to $(APPOUT)/$$app.bin; \
+    	i686-elf-ld $(LDPARAMS) -T $< -o $(APPOUT)/$$app.bin $$app/*.o -L$(LIBDIR) --library=cactusos; \
+		nm -a $(APPOUT)/$$app.bin | sort -d > $(APPOUT)/$$app.sym; \
+	done
 
-# # Build libcactusos.a with makefile in the LIBDIR
-# $(LIBFILE):
-# 	cd $(LIBDIR) && $(MAKE)
+clean:
+	rm -rf $(OBJFILES) $(LIBFILE)
 
-# %.o: %.cpp
-# 	mkdir -p $(@D)
-# 	i686-elf-g++ $(G++PARAMS) -c -o $@ $<
+# Build libcactusos.a with makefile in the LIBDIR
+$(LIBFILE):
+	cd $(LIBDIR) && $(MAKE)
 
-# %.o: %.c
-# 	mkdir -p $(@D)
-# 	i686-elf-gcc $(GCCPARAMS) -c -o $@ $<
+%.o: %.cpp
+	mkdir -p $(@D)
+	i686-elf-g++ $(G++PARAMS) -c -o $@ $<
 
-# %.o: %.asm
-# 	mkdir -p $(@D)
-# 	nasm -f elf32 -O0 $< -o $@
+%.o: %.c
+	mkdir -p $(@D)
+	i686-elf-gcc $(GCCPARAMS) -c -o $@ $<
 
-# %.o: %.s
-# 	mkdir -p $(@D)
-# 	i686-elf-as --32 -o $@ $<
+%.o: %.asm
+	mkdir -p $(@D)
+	nasm -f elf32 -O0 $< -o $@
+
+%.o: %.s
+	mkdir -p $(@D)
+	i686-elf-as --32 -o $@ $<
diff --git a/drivers/usb3/driver_pl2303.c b/drivers/usb3/driver_pl2303.c
new file mode 100644
index 0000000..e69de29
diff --git a/drivers/usb3/driver_silabs.c b/drivers/usb3/driver_silabs.c
index b62f180..e290cbf 100644
--- a/drivers/usb3/driver_silabs.c
+++ b/drivers/usb3/driver_silabs.c
@@ -21,6 +21,7 @@
 #include <assert.h>
 #include <stdlib.h>
 #include <string.h>
+#include <config.h>
 #ifdef __LINUX__
 #include <sys/_endian.h>
 #endif 
diff --git a/include/sys/cdefs.h b/include/sys/cdefs.h
new file mode 100644
index 0000000..f2b1424
--- /dev/null
+++ b/include/sys/cdefs.h
@@ -0,0 +1,413 @@
+/*	$OpenBSD: cdefs.h,v 1.43 2018/10/29 17:10:40 guenther Exp $	*/
+/*	$NetBSD: cdefs.h,v 1.16 1996/04/03 20:46:39 christos Exp $	*/
+
+/*
+ * Copyright (c) 1991, 1993
+ *	The Regents of the University of California.  All rights reserved.
+ *
+ * This code is derived from software contributed to Berkeley by
+ * Berkeley Software Design, Inc.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of the University nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software
+ *    without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ *
+ *	@(#)cdefs.h	8.7 (Berkeley) 1/21/94
+ */
+
+#ifndef	_SYS_CDEFS_H_
+#define	_SYS_CDEFS_H_
+
+#include <machine/cdefs.h>
+
+/*
+ * Macro to test if we're using a specific version of gcc or later.
+ */
+#ifdef __GNUC__
+#define __GNUC_PREREQ__(ma, mi) \
+	((__GNUC__ > (ma)) || (__GNUC__ == (ma) && __GNUC_MINOR__ >= (mi)))
+#else
+#define __GNUC_PREREQ__(ma, mi) 0
+#endif
+
+/*
+ * The __CONCAT macro is used to concatenate parts of symbol names, e.g.
+ * with "#define OLD(foo) __CONCAT(old,foo)", OLD(foo) produces oldfoo.
+ * The __CONCAT macro is a bit tricky -- make sure you don't put spaces
+ * in between its arguments.  Do not use __CONCAT on double-quoted strings,
+ * such as those from the __STRING macro: to concatenate strings just put
+ * them next to each other.
+ */
+#if defined(__STDC__) || defined(__cplusplus)
+#define	__P(protos)	protos		/* full-blown ANSI C */
+#define	__CONCAT(x,y)	x ## y
+#define	__STRING(x)	#x
+
+#define	__const		const		/* define reserved names to standard */
+#define	__signed	signed
+#define	__volatile	volatile
+#if defined(__cplusplus) || defined(__PCC__)
+#define	__inline	inline		/* convert to C++ keyword */
+#else
+#if !defined(__GNUC__)
+#define	__inline			/* delete GCC keyword */
+#endif /* !__GNUC__ */
+#endif /* !__cplusplus */
+
+#else	/* !(__STDC__ || __cplusplus) */
+#define	__P(protos)	()		/* traditional C preprocessor */
+#define	__CONCAT(x,y)	x/**/y
+#define	__STRING(x)	"x"
+
+#if !defined(__GNUC__)
+#define	__const				/* delete pseudo-ANSI C keywords */
+#define	__inline
+#define	__signed
+#define	__volatile
+#endif	/* !__GNUC__ */
+#endif	/* !(__STDC__ || __cplusplus) */
+
+/*
+ * GCC1 and some versions of GCC2 declare dead (non-returning) and
+ * pure (no side effects) functions using "volatile" and "const";
+ * unfortunately, these then cause warnings under "-ansi -pedantic".
+ * GCC >= 2.5 uses the __attribute__((attrs)) style.  All of these
+ * work for GNU C++ (modulo a slight glitch in the C++ grammar in
+ * the distribution version of 2.5.5).
+ */
+
+#if !__GNUC_PREREQ__(2, 5) && !defined(__PCC__)
+#define	__attribute__(x)	/* delete __attribute__ if non-gcc or gcc1 */
+#if defined(__GNUC__) && !defined(__STRICT_ANSI__)
+#define	__dead		__volatile
+#define	__pure		__const
+#endif
+#else
+#define __dead		__attribute__((__noreturn__))
+#define __pure		__attribute__((__const__))
+#endif
+
+#if __GNUC_PREREQ__(2, 7)
+#define	__unused	__attribute__((__unused__))
+#else
+#define	__unused	/* delete */
+#endif
+
+#if __GNUC_PREREQ__(3, 1)
+#define	__used		__attribute__((__used__))
+#else
+#define	__used		__unused	/* suppress -Wunused warnings */
+#endif
+
+#if __GNUC_PREREQ__(3,4)
+# define __warn_unused_result	__attribute__((__warn_unused_result__))
+#else
+# define __warn_unused_result	/* delete */
+#endif
+
+#if __GNUC_PREREQ__(3,3) && !defined(__clang__)
+# define __bounded(args)	__attribute__ ((__bounded__ args ))
+#else
+# define __bounded(args)	/* delete */
+#endif
+
+/*
+ * __returns_twice makes the compiler not assume the function
+ * only returns once.  This affects registerisation of variables:
+ * even local variables need to be in memory across such a call.
+ * Example: setjmp()
+ */
+#if __GNUC_PREREQ__(4, 1)
+#define __returns_twice	__attribute__((returns_twice))
+#else
+#define __returns_twice
+#endif
+
+/*
+ * __only_inline makes the compiler only use this function definition
+ * for inlining; references that can't be inlined will be left as
+ * external references instead of generating a local copy.  The
+ * matching library should include a simple extern definition for
+ * the function to handle those references.  c.f. ctype.h
+ */
+#ifdef __GNUC__
+#  if __GNUC_PREREQ__(4, 2)
+#define __only_inline	extern __inline __attribute__((__gnu_inline__))
+#  else
+#define __only_inline	extern __inline
+#  endif
+#else
+#define __only_inline	static __inline
+#endif
+
+/*
+ * GNU C version 2.96 adds explicit branch prediction so that
+ * the CPU back-end can hint the processor and also so that
+ * code blocks can be reordered such that the predicted path
+ * sees a more linear flow, thus improving cache behavior, etc.
+ *
+ * The following two macros provide us with a way to utilize this
+ * compiler feature.  Use __predict_true() if you expect the expression
+ * to evaluate to true, and __predict_false() if you expect the
+ * expression to evaluate to false.
+ *
+ * A few notes about usage:
+ *
+ *	* Generally, __predict_false() error condition checks (unless
+ *	  you have some _strong_ reason to do otherwise, in which case
+ *	  document it), and/or __predict_true() `no-error' condition
+ *	  checks, assuming you want to optimize for the no-error case.
+ *
+ *	* Other than that, if you don't know the likelihood of a test
+ *	  succeeding from empirical or other `hard' evidence, don't
+ *	  make predictions.
+ *
+ *	* These are meant to be used in places that are run `a lot'.
+ *	  It is wasteful to make predictions in code that is run
+ *	  seldomly (e.g. at subsystem initialization time) as the
+ *	  basic block reordering that this affects can often generate
+ *	  larger code.
+ */
+#if __GNUC_PREREQ__(2, 96)
+#define __predict_true(exp)	__builtin_expect(((exp) != 0), 1)
+#define __predict_false(exp)	__builtin_expect(((exp) != 0), 0)
+#else
+#define __predict_true(exp)	((exp) != 0)
+#define __predict_false(exp)	((exp) != 0)
+#endif
+
+/* Delete pseudo-keywords wherever they are not available or needed. */
+#ifndef __dead
+#define	__dead
+#define	__pure
+#endif
+
+/*
+ * The __packed macro indicates that a variable or structure members
+ * should have the smallest possible alignment, despite any host CPU
+ * alignment requirements.
+ *
+ * The __aligned(x) macro specifies the minimum alignment of a
+ * variable or structure.
+ *
+ * These macros together are useful for describing the layout and
+ * alignment of messages exchanged with hardware or other systems.
+ */
+
+#if __GNUC_PREREQ__(2, 7) || defined(__PCC__)
+#define	__packed	__attribute__((__packed__))
+#define	__aligned(x)	__attribute__((__aligned__(x)))
+#endif
+
+#if !__GNUC_PREREQ__(2, 8)
+#define	__extension__
+#endif
+
+#if __GNUC_PREREQ__(3, 0)
+#define	__malloc	__attribute__((__malloc__))
+#else
+#define	__malloc
+#endif
+
+#if defined(__cplusplus)
+#define	__BEGIN_EXTERN_C	extern "C" {
+#define	__END_EXTERN_C		}
+#else
+#define	__BEGIN_EXTERN_C
+#define	__END_EXTERN_C
+#endif
+
+#if __GNUC_PREREQ__(4, 0)
+#define	__dso_public	__attribute__((__visibility__("default")))
+#define	__dso_hidden	__attribute__((__visibility__("hidden")))
+#define	__BEGIN_PUBLIC_DECLS \
+	_Pragma("GCC visibility push(default)") __BEGIN_EXTERN_C
+#define	__END_PUBLIC_DECLS	__END_EXTERN_C _Pragma("GCC visibility pop")
+#define	__BEGIN_HIDDEN_DECLS \
+	_Pragma("GCC visibility push(hidden)") __BEGIN_EXTERN_C
+#define	__END_HIDDEN_DECLS	__END_EXTERN_C _Pragma("GCC visibility pop")
+#else
+#define	__dso_public
+#define	__dso_hidden
+#define	__BEGIN_PUBLIC_DECLS	__BEGIN_EXTERN_C
+#define	__END_PUBLIC_DECLS	__END_EXTERN_C
+#define	__BEGIN_HIDDEN_DECLS	__BEGIN_EXTERN_C
+#define	__END_HIDDEN_DECLS	__END_EXTERN_C
+#endif
+
+#define	__BEGIN_DECLS	__BEGIN_EXTERN_C
+#define	__END_DECLS	__END_EXTERN_C
+
+/*
+ * "The nice thing about standards is that there are so many to choose from."
+ * There are a number of "feature test macros" specified by (different)
+ * standards that determine which interfaces and types the header files
+ * should expose.
+ *
+ * Because of inconsistencies in these macros, we define our own
+ * set in the private name space that end in _VISIBLE.  These are
+ * always defined and so headers can test their values easily.
+ * Things can get tricky when multiple feature macros are defined.
+ * We try to take the union of all the features requested.
+ *
+ * The following macros are guaranteed to have a value after cdefs.h
+ * has been included:
+ *	__POSIX_VISIBLE
+ *	__XPG_VISIBLE
+ *	__ISO_C_VISIBLE
+ *	__BSD_VISIBLE
+ */
+
+/*
+ * X/Open Portability Guides and Single Unix Specifications.
+ * _XOPEN_SOURCE				XPG3
+ * _XOPEN_SOURCE && _XOPEN_VERSION = 4		XPG4
+ * _XOPEN_SOURCE && _XOPEN_SOURCE_EXTENDED = 1	XPG4v2
+ * _XOPEN_SOURCE == 500				XPG5
+ * _XOPEN_SOURCE == 520				XPG5v2
+ * _XOPEN_SOURCE == 600				POSIX 1003.1-2001 with XSI
+ * _XOPEN_SOURCE == 700				POSIX 1003.1-2008 with XSI
+ *
+ * The XPG spec implies a specific value for _POSIX_C_SOURCE.
+ */
+#ifdef _XOPEN_SOURCE
+# if (_XOPEN_SOURCE - 0 >= 700)
+#  define __XPG_VISIBLE		700
+#  undef _POSIX_C_SOURCE
+#  define _POSIX_C_SOURCE	200809L
+# elif (_XOPEN_SOURCE - 0 >= 600)
+#  define __XPG_VISIBLE		600
+#  undef _POSIX_C_SOURCE
+#  define _POSIX_C_SOURCE	200112L
+# elif (_XOPEN_SOURCE - 0 >= 520)
+#  define __XPG_VISIBLE		520
+#  undef _POSIX_C_SOURCE
+#  define _POSIX_C_SOURCE	199506L
+# elif (_XOPEN_SOURCE - 0 >= 500)
+#  define __XPG_VISIBLE		500
+#  undef _POSIX_C_SOURCE
+#  define _POSIX_C_SOURCE	199506L
+# elif (_XOPEN_SOURCE_EXTENDED - 0 == 1)
+#  define __XPG_VISIBLE		420
+# elif (_XOPEN_VERSION - 0 >= 4)
+#  define __XPG_VISIBLE		400
+# else
+#  define __XPG_VISIBLE		300
+# endif
+#endif
+
+/*
+ * POSIX macros, these checks must follow the XOPEN ones above.
+ *
+ * _POSIX_SOURCE == 1		1003.1-1988 (superseded by _POSIX_C_SOURCE)
+ * _POSIX_C_SOURCE == 1		1003.1-1990
+ * _POSIX_C_SOURCE == 2		1003.2-1992
+ * _POSIX_C_SOURCE == 199309L	1003.1b-1993
+ * _POSIX_C_SOURCE == 199506L   1003.1c-1995, 1003.1i-1995,
+ *				and the omnibus ISO/IEC 9945-1:1996
+ * _POSIX_C_SOURCE == 200112L   1003.1-2001
+ * _POSIX_C_SOURCE == 200809L   1003.1-2008
+ *
+ * The POSIX spec implies a specific value for __ISO_C_VISIBLE, though
+ * this may be overridden by the _ISOC99_SOURCE macro later.
+ */
+#ifdef _POSIX_C_SOURCE
+# if (_POSIX_C_SOURCE - 0 >= 200809)
+#  define __POSIX_VISIBLE	200809
+#  define __ISO_C_VISIBLE	1999
+# elif (_POSIX_C_SOURCE - 0 >= 200112)
+#  define __POSIX_VISIBLE	200112
+#  define __ISO_C_VISIBLE	1999
+# elif (_POSIX_C_SOURCE - 0 >= 199506)
+#  define __POSIX_VISIBLE	199506
+#  define __ISO_C_VISIBLE	1990
+# elif (_POSIX_C_SOURCE - 0 >= 199309)
+#  define __POSIX_VISIBLE	199309
+#  define __ISO_C_VISIBLE	1990
+# elif (_POSIX_C_SOURCE - 0 >= 2)
+#  define __POSIX_VISIBLE	199209
+#  define __ISO_C_VISIBLE	1990
+# else
+#  define __POSIX_VISIBLE	199009
+#  define __ISO_C_VISIBLE	1990
+# endif
+#elif defined(_POSIX_SOURCE)
+# define __POSIX_VISIBLE	198808
+#  define __ISO_C_VISIBLE	0
+#endif
+
+/*
+ * _ANSI_SOURCE means to expose ANSI C89 interfaces only.
+ * If the user defines it in addition to one of the POSIX or XOPEN
+ * macros, assume the POSIX/XOPEN macro(s) should take precedence.
+ */
+#if defined(_ANSI_SOURCE) && !defined(__POSIX_VISIBLE) && \
+    !defined(__XPG_VISIBLE)
+# define __POSIX_VISIBLE	0
+# define __XPG_VISIBLE		0
+# define __ISO_C_VISIBLE	1990
+#endif
+
+/*
+ * _ISOC99_SOURCE, _ISOC11_SOURCE, __STDC_VERSION__, and __cplusplus
+ * override any of the other macros since they are non-exclusive.
+ */
+#if defined(_ISOC11_SOURCE) || \
+    (defined(__STDC_VERSION__) && __STDC_VERSION__ >= 201112) || \
+    (defined(__cplusplus) && __cplusplus >= 201703)
+# undef __ISO_C_VISIBLE
+# define __ISO_C_VISIBLE	2011
+#elif defined(_ISOC99_SOURCE) || \
+    (defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901) || \
+    (defined(__cplusplus) && __cplusplus >= 201103)
+# undef __ISO_C_VISIBLE
+# define __ISO_C_VISIBLE	1999
+#endif
+
+/*
+ * Finally deal with BSD-specific interfaces that are not covered
+ * by any standards.  We expose these when none of the POSIX or XPG
+ * macros is defined or if the user explicitly asks for them.
+ */
+#if !defined(_BSD_SOURCE) && \
+   (defined(_ANSI_SOURCE) || defined(__XPG_VISIBLE) || defined(__POSIX_VISIBLE))
+# define __BSD_VISIBLE		0
+#endif
+
+/*
+ * Default values.
+ */
+#ifndef __XPG_VISIBLE
+# define __XPG_VISIBLE		700
+#endif
+#ifndef __POSIX_VISIBLE
+# define __POSIX_VISIBLE	200809
+#endif
+#ifndef __ISO_C_VISIBLE
+# define __ISO_C_VISIBLE	2011
+#endif
+#ifndef __BSD_VISIBLE
+# define __BSD_VISIBLE		1
+#endif
+
+#endif /* !_SYS_CDEFS_H_ */
\ No newline at end of file
diff --git a/kernel/include/stdint.h b/kernel/include/stdint.h
new file mode 100644
index 0000000..c0372ec
--- /dev/null
+++ b/kernel/include/stdint.h
@@ -0,0 +1,231 @@
+/*	$OpenBSD: stdint.h,v 1.11 2019/01/25 00:19:26 millert Exp $	*/
+
+/*
+ * Copyright (c) 1997, 2005 Todd C. Miller <millert@openbsd.org>
+ *
+ * Permission to use, copy, modify, and distribute this software for any
+ * purpose with or without fee is hereby granted, provided that the above
+ * copyright notice and this permission notice appear in all copies.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
+ * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
+ * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
+ * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
+ * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
+ * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
+ * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
+ */
+
+#ifndef	_SYS_STDINT_H_
+#define _SYS_STDINT_H_
+
+#include <sys/cdefs.h>
+#include <machine/_types.h>
+
+#ifndef	__BIT_TYPES_DEFINED__
+#define	__BIT_TYPES_DEFINED__
+#endif
+
+/* 7.18.1.1 Exact-width integer types (also in sys/types.h) */
+#ifndef	_INT8_T_DEFINED_
+#define	_INT8_T_DEFINED_
+typedef	__int8_t		int8_t;
+#endif
+
+#ifndef	_UINT8_T_DEFINED_
+#define	_UINT8_T_DEFINED_
+typedef	__uint8_t		uint8_t;
+#endif
+
+#ifndef	_INT16_T_DEFINED_
+#define	_INT16_T_DEFINED_
+typedef	__int16_t		int16_t;
+#endif
+
+#ifndef	_UINT16_T_DEFINED_
+#define	_UINT16_T_DEFINED_
+typedef	__uint16_t		uint16_t;
+#endif
+
+#ifndef	_INT32_T_DEFINED_
+#define	_INT32_T_DEFINED_
+typedef	__int32_t		int32_t;
+#endif
+
+#ifndef	_UINT32_T_DEFINED_
+#define	_UINT32_T_DEFINED_
+typedef	__uint32_t		uint32_t;
+#endif
+
+#ifndef	_INT64_T_DEFINED_
+#define	_INT64_T_DEFINED_
+typedef	__int64_t		int64_t;
+#endif
+
+#ifndef	_UINT64_T_DEFINED_
+#define	_UINT64_T_DEFINED_
+typedef	__uint64_t		uint64_t;
+#endif
+
+/* 7.18.1.2 Minimum-width integer types */
+typedef	__int_least8_t		int_least8_t;
+typedef	__uint_least8_t		uint_least8_t;
+typedef	__int_least16_t		int_least16_t;
+typedef	__uint_least16_t	uint_least16_t;
+typedef	__int_least32_t		int_least32_t;
+typedef	__uint_least32_t	uint_least32_t;
+typedef	__int_least64_t		int_least64_t;
+typedef	__uint_least64_t	uint_least64_t;
+
+/* 7.18.1.3 Fastest minimum-width integer types */
+typedef	__int_fast8_t		int_fast8_t;
+typedef	__uint_fast8_t		uint_fast8_t;
+typedef	__int_fast16_t		int_fast16_t;
+typedef	__uint_fast16_t		uint_fast16_t;
+typedef	__int_fast32_t		int_fast32_t;
+typedef	__uint_fast32_t		uint_fast32_t;
+typedef	__int_fast64_t		int_fast64_t;
+typedef	__uint_fast64_t		uint_fast64_t;
+
+/* 7.18.1.4 Integer types capable of holding object pointers */
+#ifndef	_INTPTR_T_DEFINED_
+#define	_INTPTR_T_DEFINED_
+typedef	__intptr_t		intptr_t;
+#endif
+
+typedef	__uintptr_t		uintptr_t;
+
+/* 7.18.1.5 Greatest-width integer types */
+typedef	__intmax_t		intmax_t;
+typedef	__uintmax_t		uintmax_t;
+
+/*
+ * 7.18.2 Limits of specified-width integer types.
+ *
+ * The following object-like macros specify the minimum and maximum limits
+ * of integer types corresponding to the typedef names defined above.
+ */
+
+/* 7.18.2.1 Limits of exact-width integer types */
+#define	INT8_MIN		(-0x7f - 1)
+#define	INT16_MIN		(-0x7fff - 1)
+#define	INT32_MIN		(-0x7fffffff - 1)
+#define	INT64_MIN		(-0x7fffffffffffffffLL - 1)
+
+#define	INT8_MAX		0x7f
+#define	INT16_MAX		0x7fff
+#define	INT32_MAX		0x7fffffff
+#define	INT64_MAX		0x7fffffffffffffffLL
+
+#define	UINT8_MAX		0xff
+#define	UINT16_MAX		0xffff
+#define	UINT32_MAX		0xffffffffU
+#define	UINT64_MAX		0xffffffffffffffffULL
+
+/* 7.18.2.2 Limits of minimum-width integer types */
+#define	INT_LEAST8_MIN		INT8_MIN
+#define	INT_LEAST16_MIN		INT16_MIN
+#define	INT_LEAST32_MIN		INT32_MIN
+#define	INT_LEAST64_MIN		INT64_MIN
+
+#define	INT_LEAST8_MAX		INT8_MAX
+#define	INT_LEAST16_MAX		INT16_MAX
+#define	INT_LEAST32_MAX		INT32_MAX
+#define	INT_LEAST64_MAX		INT64_MAX
+
+#define	UINT_LEAST8_MAX		UINT8_MAX
+#define	UINT_LEAST16_MAX	UINT16_MAX
+#define	UINT_LEAST32_MAX	UINT32_MAX
+#define	UINT_LEAST64_MAX	UINT64_MAX
+
+/* 7.18.2.3 Limits of fastest minimum-width integer types */
+#define	INT_FAST8_MIN		__INT_FAST8_MIN
+#define	INT_FAST16_MIN		__INT_FAST16_MIN
+#define	INT_FAST32_MIN		__INT_FAST32_MIN
+#define	INT_FAST64_MIN		__INT_FAST64_MIN
+
+#define	INT_FAST8_MAX		__INT_FAST8_MAX
+#define	INT_FAST16_MAX		__INT_FAST16_MAX
+#define	INT_FAST32_MAX		__INT_FAST32_MAX
+#define	INT_FAST64_MAX		__INT_FAST64_MAX
+
+#define	UINT_FAST8_MAX		__UINT_FAST8_MAX
+#define	UINT_FAST16_MAX		__UINT_FAST16_MAX
+#define	UINT_FAST32_MAX		__UINT_FAST32_MAX
+#define	UINT_FAST64_MAX		__UINT_FAST64_MAX
+
+/* 7.18.2.4 Limits of integer types capable of holding object pointers */
+#ifdef __LP64__
+#define	INTPTR_MIN		(-0x7fffffffffffffffL - 1)
+#define	INTPTR_MAX		0x7fffffffffffffffL
+#define	UINTPTR_MAX		0xffffffffffffffffUL
+#else
+#define	INTPTR_MIN		(-0x7fffffffL - 1)
+#define	INTPTR_MAX		0x7fffffffL
+#define	UINTPTR_MAX		0xffffffffUL
+#endif
+
+/* 7.18.2.5 Limits of greatest-width integer types */
+#define	INTMAX_MIN		INT64_MIN
+#define	INTMAX_MAX		INT64_MAX
+#define	UINTMAX_MAX		UINT64_MAX
+
+/*
+ * 7.18.3 Limits of other integer types.
+ *
+ * The following object-like macros specify the minimum and maximum limits
+ * of integer types corresponding to types specified in other standard
+ * header files.
+ */
+
+/* Limits of ptrdiff_t */
+#define	PTRDIFF_MIN		INTPTR_MIN
+#define	PTRDIFF_MAX		INTPTR_MAX
+
+/* Limits of sig_atomic_t */
+#define	SIG_ATOMIC_MIN		INT32_MIN
+#define	SIG_ATOMIC_MAX		INT32_MAX
+
+/* Limit of size_t */
+#ifndef	SIZE_MAX
+#define	SIZE_MAX		UINTPTR_MAX
+#endif
+
+/* Limits of wchar_t */
+#ifndef	WCHAR_MIN
+#define	WCHAR_MIN		INT32_MIN
+#endif
+#ifndef	WCHAR_MAX
+#define	WCHAR_MAX		INT32_MAX
+#endif
+
+/* Limits of wint_t */
+#define	WINT_MIN		INT32_MIN
+#define	WINT_MAX		INT32_MAX
+
+/*
+ * 7.18.4 Macros for integer constants.
+ *
+ * The following function-like macros expand to integer constants
+ * suitable for initializing objects that have integer types corresponding
+ * to types defined in <stdint.h>.  The argument in any instance of
+ * these macros shall be a decimal, octal, or hexadecimal constant with
+ * a value that does not exceed the limits for the corresponding type.
+ */
+
+/* 7.18.4.1 Macros for minimum-width integer constants. */
+#define	INT8_C(_c)		(_c)
+#define	INT16_C(_c)		(_c)
+#define	INT32_C(_c)		(_c)
+#define	INT64_C(_c)		__CONCAT(_c, LL)
+
+#define	UINT8_C(_c)		(_c)
+#define	UINT16_C(_c)		(_c)
+#define	UINT32_C(_c)		__CONCAT(_c, U)
+#define	UINT64_C(_c)		__CONCAT(_c, ULL)
+
+/* 7.18.4.2 Macros for greatest-width integer constants. */
+#define	INTMAX_C(_c)		__CONCAT(_c, LL)
+#define	UINTMAX_C(_c)		__CONCAT(_c, ULL)
+
+#endif /* _SYS_STDINT_H_ */
\ No newline at end of file
diff --git a/libdrive/include/cdefs.h b/libdrive/include/cdefs.h
new file mode 100644
index 0000000..ad69a44
--- /dev/null
+++ b/libdrive/include/cdefs.h
@@ -0,0 +1,2 @@
+#pragma once
+#include <sys/cdefs.h>
\ No newline at end of file
diff --git a/libdrive/include/stdint.h b/libdrive/include/stdint.h
new file mode 100644
index 0000000..c0372ec
--- /dev/null
+++ b/libdrive/include/stdint.h
@@ -0,0 +1,231 @@
+/*	$OpenBSD: stdint.h,v 1.11 2019/01/25 00:19:26 millert Exp $	*/
+
+/*
+ * Copyright (c) 1997, 2005 Todd C. Miller <millert@openbsd.org>
+ *
+ * Permission to use, copy, modify, and distribute this software for any
+ * purpose with or without fee is hereby granted, provided that the above
+ * copyright notice and this permission notice appear in all copies.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
+ * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
+ * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
+ * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
+ * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
+ * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
+ * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
+ */
+
+#ifndef	_SYS_STDINT_H_
+#define _SYS_STDINT_H_
+
+#include <sys/cdefs.h>
+#include <machine/_types.h>
+
+#ifndef	__BIT_TYPES_DEFINED__
+#define	__BIT_TYPES_DEFINED__
+#endif
+
+/* 7.18.1.1 Exact-width integer types (also in sys/types.h) */
+#ifndef	_INT8_T_DEFINED_
+#define	_INT8_T_DEFINED_
+typedef	__int8_t		int8_t;
+#endif
+
+#ifndef	_UINT8_T_DEFINED_
+#define	_UINT8_T_DEFINED_
+typedef	__uint8_t		uint8_t;
+#endif
+
+#ifndef	_INT16_T_DEFINED_
+#define	_INT16_T_DEFINED_
+typedef	__int16_t		int16_t;
+#endif
+
+#ifndef	_UINT16_T_DEFINED_
+#define	_UINT16_T_DEFINED_
+typedef	__uint16_t		uint16_t;
+#endif
+
+#ifndef	_INT32_T_DEFINED_
+#define	_INT32_T_DEFINED_
+typedef	__int32_t		int32_t;
+#endif
+
+#ifndef	_UINT32_T_DEFINED_
+#define	_UINT32_T_DEFINED_
+typedef	__uint32_t		uint32_t;
+#endif
+
+#ifndef	_INT64_T_DEFINED_
+#define	_INT64_T_DEFINED_
+typedef	__int64_t		int64_t;
+#endif
+
+#ifndef	_UINT64_T_DEFINED_
+#define	_UINT64_T_DEFINED_
+typedef	__uint64_t		uint64_t;
+#endif
+
+/* 7.18.1.2 Minimum-width integer types */
+typedef	__int_least8_t		int_least8_t;
+typedef	__uint_least8_t		uint_least8_t;
+typedef	__int_least16_t		int_least16_t;
+typedef	__uint_least16_t	uint_least16_t;
+typedef	__int_least32_t		int_least32_t;
+typedef	__uint_least32_t	uint_least32_t;
+typedef	__int_least64_t		int_least64_t;
+typedef	__uint_least64_t	uint_least64_t;
+
+/* 7.18.1.3 Fastest minimum-width integer types */
+typedef	__int_fast8_t		int_fast8_t;
+typedef	__uint_fast8_t		uint_fast8_t;
+typedef	__int_fast16_t		int_fast16_t;
+typedef	__uint_fast16_t		uint_fast16_t;
+typedef	__int_fast32_t		int_fast32_t;
+typedef	__uint_fast32_t		uint_fast32_t;
+typedef	__int_fast64_t		int_fast64_t;
+typedef	__uint_fast64_t		uint_fast64_t;
+
+/* 7.18.1.4 Integer types capable of holding object pointers */
+#ifndef	_INTPTR_T_DEFINED_
+#define	_INTPTR_T_DEFINED_
+typedef	__intptr_t		intptr_t;
+#endif
+
+typedef	__uintptr_t		uintptr_t;
+
+/* 7.18.1.5 Greatest-width integer types */
+typedef	__intmax_t		intmax_t;
+typedef	__uintmax_t		uintmax_t;
+
+/*
+ * 7.18.2 Limits of specified-width integer types.
+ *
+ * The following object-like macros specify the minimum and maximum limits
+ * of integer types corresponding to the typedef names defined above.
+ */
+
+/* 7.18.2.1 Limits of exact-width integer types */
+#define	INT8_MIN		(-0x7f - 1)
+#define	INT16_MIN		(-0x7fff - 1)
+#define	INT32_MIN		(-0x7fffffff - 1)
+#define	INT64_MIN		(-0x7fffffffffffffffLL - 1)
+
+#define	INT8_MAX		0x7f
+#define	INT16_MAX		0x7fff
+#define	INT32_MAX		0x7fffffff
+#define	INT64_MAX		0x7fffffffffffffffLL
+
+#define	UINT8_MAX		0xff
+#define	UINT16_MAX		0xffff
+#define	UINT32_MAX		0xffffffffU
+#define	UINT64_MAX		0xffffffffffffffffULL
+
+/* 7.18.2.2 Limits of minimum-width integer types */
+#define	INT_LEAST8_MIN		INT8_MIN
+#define	INT_LEAST16_MIN		INT16_MIN
+#define	INT_LEAST32_MIN		INT32_MIN
+#define	INT_LEAST64_MIN		INT64_MIN
+
+#define	INT_LEAST8_MAX		INT8_MAX
+#define	INT_LEAST16_MAX		INT16_MAX
+#define	INT_LEAST32_MAX		INT32_MAX
+#define	INT_LEAST64_MAX		INT64_MAX
+
+#define	UINT_LEAST8_MAX		UINT8_MAX
+#define	UINT_LEAST16_MAX	UINT16_MAX
+#define	UINT_LEAST32_MAX	UINT32_MAX
+#define	UINT_LEAST64_MAX	UINT64_MAX
+
+/* 7.18.2.3 Limits of fastest minimum-width integer types */
+#define	INT_FAST8_MIN		__INT_FAST8_MIN
+#define	INT_FAST16_MIN		__INT_FAST16_MIN
+#define	INT_FAST32_MIN		__INT_FAST32_MIN
+#define	INT_FAST64_MIN		__INT_FAST64_MIN
+
+#define	INT_FAST8_MAX		__INT_FAST8_MAX
+#define	INT_FAST16_MAX		__INT_FAST16_MAX
+#define	INT_FAST32_MAX		__INT_FAST32_MAX
+#define	INT_FAST64_MAX		__INT_FAST64_MAX
+
+#define	UINT_FAST8_MAX		__UINT_FAST8_MAX
+#define	UINT_FAST16_MAX		__UINT_FAST16_MAX
+#define	UINT_FAST32_MAX		__UINT_FAST32_MAX
+#define	UINT_FAST64_MAX		__UINT_FAST64_MAX
+
+/* 7.18.2.4 Limits of integer types capable of holding object pointers */
+#ifdef __LP64__
+#define	INTPTR_MIN		(-0x7fffffffffffffffL - 1)
+#define	INTPTR_MAX		0x7fffffffffffffffL
+#define	UINTPTR_MAX		0xffffffffffffffffUL
+#else
+#define	INTPTR_MIN		(-0x7fffffffL - 1)
+#define	INTPTR_MAX		0x7fffffffL
+#define	UINTPTR_MAX		0xffffffffUL
+#endif
+
+/* 7.18.2.5 Limits of greatest-width integer types */
+#define	INTMAX_MIN		INT64_MIN
+#define	INTMAX_MAX		INT64_MAX
+#define	UINTMAX_MAX		UINT64_MAX
+
+/*
+ * 7.18.3 Limits of other integer types.
+ *
+ * The following object-like macros specify the minimum and maximum limits
+ * of integer types corresponding to types specified in other standard
+ * header files.
+ */
+
+/* Limits of ptrdiff_t */
+#define	PTRDIFF_MIN		INTPTR_MIN
+#define	PTRDIFF_MAX		INTPTR_MAX
+
+/* Limits of sig_atomic_t */
+#define	SIG_ATOMIC_MIN		INT32_MIN
+#define	SIG_ATOMIC_MAX		INT32_MAX
+
+/* Limit of size_t */
+#ifndef	SIZE_MAX
+#define	SIZE_MAX		UINTPTR_MAX
+#endif
+
+/* Limits of wchar_t */
+#ifndef	WCHAR_MIN
+#define	WCHAR_MIN		INT32_MIN
+#endif
+#ifndef	WCHAR_MAX
+#define	WCHAR_MAX		INT32_MAX
+#endif
+
+/* Limits of wint_t */
+#define	WINT_MIN		INT32_MIN
+#define	WINT_MAX		INT32_MAX
+
+/*
+ * 7.18.4 Macros for integer constants.
+ *
+ * The following function-like macros expand to integer constants
+ * suitable for initializing objects that have integer types corresponding
+ * to types defined in <stdint.h>.  The argument in any instance of
+ * these macros shall be a decimal, octal, or hexadecimal constant with
+ * a value that does not exceed the limits for the corresponding type.
+ */
+
+/* 7.18.4.1 Macros for minimum-width integer constants. */
+#define	INT8_C(_c)		(_c)
+#define	INT16_C(_c)		(_c)
+#define	INT32_C(_c)		(_c)
+#define	INT64_C(_c)		__CONCAT(_c, LL)
+
+#define	UINT8_C(_c)		(_c)
+#define	UINT16_C(_c)		(_c)
+#define	UINT32_C(_c)		__CONCAT(_c, U)
+#define	UINT64_C(_c)		__CONCAT(_c, ULL)
+
+/* 7.18.4.2 Macros for greatest-width integer constants. */
+#define	INTMAX_C(_c)		__CONCAT(_c, LL)
+#define	UINTMAX_C(_c)		__CONCAT(_c, ULL)
+
+#endif /* _SYS_STDINT_H_ */
\ No newline at end of file
-- 
2.43.0

