From 3dd7b540f3e5426204462bf1c0efd7c281d8d473 Mon Sep 17 00:00:00 2001
From: Heisenberg <alimirmohammad.1386@gmail.com>
Date: Mon, 1 Apr 2024 14:49:15 -0400
Subject: [PATCH 046/493] Minor update

---
 kernel/include/convert.hpp |  21 ++++++
 kernel/src/Makefile        |  50 ++++++++++++++
 kernel/src/gui/log.cc      | 131 +++++++++++++++++++++++++++++++++++++
 3 files changed, 202 insertions(+)
 create mode 100644 kernel/include/convert.hpp
 create mode 100644 kernel/src/Makefile
 create mode 100644 kernel/src/gui/log.cc

diff --git a/kernel/include/convert.hpp b/kernel/include/convert.hpp
new file mode 100644
index 0000000..060e87c
--- /dev/null
+++ b/kernel/include/convert.hpp
@@ -0,0 +1,21 @@
+#ifndef __LIBCACTUSOS__CONVERT_H
+#define __LIBCACTUSOS__CONVERT_H
+
+#include <types.hpp>
+
+namespace LIBHeisenKernel
+{
+    class Convert
+    {
+    public:
+        static char* IntToString(int i);
+
+        static char* IntToHexString(uint8_t w);
+        static char* IntToHexString(uint16_t w);
+        static char* IntToHexString(uint32_t w);
+
+        static int StringToInt(char* string);
+    };
+}
+
+#endif
\ No newline at end of file
diff --git a/kernel/src/Makefile b/kernel/src/Makefile
new file mode 100644
index 0000000..0e151b7
--- /dev/null
+++ b/kernel/src/Makefile
@@ -0,0 +1,50 @@
+CONFIG = ../makefile.config
+include ${CONFIG}
+
+INCLUDEDIRS := include
+DEBUG := -g
+
+GCCPARAMS := -m32 $(DEBUG) -I $(INCLUDEDIRS) $(OPTIMIZE_FLAGS) -Wall -fno-omit-frame-pointer -fno-use-cxa-atexit -nostdlib -fno-builtin -fno-exceptions -fno-rtti -fno-leading-underscore -Wno-write-strings -fpermissive -Wno-unknown-pragmas
+ASPARAMS := --32
+
+SRCDIR := src
+OBJDIR := obj
+
+SRCFILES := $(shell find $(SRCDIR) -type f \( -name \*.cpp -o -name \*.s -o -name \*.asm \)) #Find all the files that end with .cpp/.s/.asm
+OBJFILES := $(patsubst %.cpp,%.o,$(patsubst %.s,%.o,$(patsubst %.asm,%.o,$(SRCFILES)))) #Replace the .cpp/.s/.asm extension with .o
+OBJFILES := $(subst $(SRCDIR),$(OBJDIR),$(OBJFILES)) #Replace the "src" part with "obj"
+
+
+####################################
+#C++ source files
+####################################
+$(OBJDIR)/%.o: $(SRCDIR)/%.cpp
+	mkdir -p $(@D)
+	i686-elf-g++ $(GCCPARAMS) -c -o $@ $<
+
+####################################
+#GAS assembly files
+####################################
+$(OBJDIR)/%.o: $(SRCDIR)/%.s
+	mkdir -p $(@D)
+	i686-elf-as $(ASPARAMS) -o $@ $<
+
+####################################
+#NASM assembly files
+####################################
+$(OBJDIR)/%.o: $(SRCDIR)/%.asm
+	mkdir -p $(@D)
+	nasm -f elf32 -O0 $< -o $@
+
+libcactusos.a: $(OBJFILES)
+	i686-elf-ar r libcactusos.a $(OBJFILES)
+
+.PHONY: clean filelist
+clean:
+	rm -rf $(OBJDIR) libcactusos.a
+
+filelist:
+	@echo "Source Files:"
+	@echo -$(SRCFILES)
+	@echo "Object Files:"
+	@echo -$(OBJFILES)
diff --git a/kernel/src/gui/log.cc b/kernel/src/gui/log.cc
new file mode 100644
index 0000000..4f33aca
--- /dev/null
+++ b/kernel/src/gui/log.cc
@@ -0,0 +1,131 @@
+#include <log.hpp>
+#include <syscall.hpp>
+#include <stdarg.h>
+#include <types.hpp>
+#include <string.hpp>
+#include <convert.hpp>
+#include <proc.hpp>
+
+using namespace LIBHeisenKernel;
+
+void LIBHeisenKernel::Log(LogLevel level, char* msg)
+{
+    DoSyscall(SYSCALL_LOG, level, (int)msg);
+}
+
+void printLen(const char* data, uint32_t length)
+{
+    Process::WriteStdOut((char*)data, (int)length);
+}
+
+void LIBHeisenKernel::Print(const char* __restrict__ format, ...)
+{
+    va_list parameters;
+	va_start(parameters, format);
+ 
+	while (*format != '\0') { 
+		if (format[0] != '%' || format[1] == '%') {
+			if (format[0] == '%')
+				format++;
+			uint32_t amount = 1;
+			while (format[amount] && format[amount] != '%')
+				amount++;
+			printLen(format, amount);
+			format += amount;
+			continue;
+		}
+ 
+		const char* format_begun_at = format++;
+ 
+		if (*format == 'c') {
+			format++;
+			char c = (char) va_arg(parameters, int /* char promotes to int */);
+			printLen(&c, sizeof(c));
+		} else if (*format == 's') {
+			format++;
+			const char* str = va_arg(parameters, const char*);
+			uint32_t len = strlen(str);
+			printLen(str, len);
+         } else if(*format == 'd') {
+            format++;
+            int n = va_arg(parameters, int);
+            int numChars = 0;
+            if (n < 0) { n = -n; numChars++; printLen("-", 1); }
+
+            int temp = n;
+            do
+            {
+                numChars++;
+                temp /= 10;
+            } while (temp);
+
+            printLen(Convert::IntToString(n), numChars);
+        } else if(*format == 'b') {
+            format++;
+            uint8_t n = va_arg(parameters, int);
+            char* str = Convert::IntToHexString(n);
+            printLen("0x", 2); printLen(str, sizeof(uint8_t)<<1);
+            delete str;
+        } else if(*format == 'w') {
+            format++;
+            uint16_t n = va_arg(parameters, int);
+            char* str = Convert::IntToHexString(n);
+            printLen("0x", 2); printLen(str, sizeof(uint16_t)<<1);
+            delete str;
+        } else if(*format == 'x') {
+            format++;
+            uint32_t n = va_arg(parameters, int);
+            char* str = Convert::IntToHexString(n);
+            printLen("0x", 2); printLen(str, sizeof(uint32_t)<<1);
+            delete str;
+        } else if(*format == 'f') {
+            format++;
+            double n = va_arg(parameters, double);
+            if(n < 0.0)
+            {
+                printLen("-", 1);
+                n = -n;
+            }
+            if(n != n) {//Not a number
+                printLen("NaN", 3);
+                return;   
+            }
+
+            //Print integer part
+            Print("%d", (int)n);
+        
+            // remove the integer part
+            n -= (double)((int)n);
+
+            if(n != 0.0)
+                // now on to the decimal potion
+                printLen(".", 1);
+
+            /* on every iteration, make sure there are still decimal places left that are non-zero,
+            and make sure we're still within the user-defined precision range. */
+            int cur_prec = 1;
+            while(n > (double)((int)n) && cur_prec++ < 8)
+            {
+                // move the next decimal into the integer portion and print it
+                n *= 10;
+                Print("%d", (int)n);
+            
+                /* if the nue is == the floored nue (integer portion),
+                then there are no more decimal places that are non-zero. */
+                if(n == (double)((int)n))
+                    break;
+            
+                // subtract the integer portion
+                n -= (double)((int)n);
+            }
+
+        } else {
+			format = format_begun_at;
+			uint32_t len = strlen(format);
+			printLen(format, len);
+			format += len;
+		}
+	}
+ 
+	va_end(parameters);
+}
\ No newline at end of file
-- 
2.43.0

