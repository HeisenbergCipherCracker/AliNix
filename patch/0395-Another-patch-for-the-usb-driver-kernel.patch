From 429330ed1415f37b32a204b66f6e3357680b5b95 Mon Sep 17 00:00:00 2001
From: Heisenberg <alimirmohammad.1386@gmail.com>
Date: Sun, 7 Apr 2024 12:43:14 -0400
Subject: [PATCH 395/493] Another patch for the usb driver kernel

---
 drivers/Makefile                |   5 +-
 libdrive/include/config.h       |   9 +++
 libdrive/include/internal.h     |  57 ++++++++++++++
 libdrive/include/libusbserial.h | 129 ++++++++++++++++++++++++++++++++
 4 files changed, 198 insertions(+), 2 deletions(-)
 create mode 100644 libdrive/include/config.h
 create mode 100644 libdrive/include/internal.h
 create mode 100644 libdrive/include/libusbserial.h

diff --git a/drivers/Makefile b/drivers/Makefile
index 465607b..2412f88 100644
--- a/drivers/Makefile
+++ b/drivers/Makefile
@@ -5,9 +5,10 @@ LIBINCLUDE := ../lib/include
 LIBDIR := ../lib
 LIBFILE := ../lib/libcactusos.a
 DEBUG := -g
+LIBDRIVEINCLUDE = ../libdrive/include
 
-G++PARAMS := -m32 $(DEBUG) -I $(LIBINCLUDE) $(OPTIMIZE_FLAGS) -Wall -fno-omit-frame-pointer -fno-use-cxa-atexit -nostdlib -fno-builtin -fno-exceptions -fno-rtti -fno-leading-underscore -Wno-write-strings -fpermissive -Wno-unknown-pragmas
-GCCPARAMS := -m32 $(DEBUG) -I $(LIBINCLUDE) $(OPTIMIZE_FLAGS) -Wall -fno-omit-frame-pointer -nostdlib -fno-builtin -fleading-underscore -Wno-unknown-pragmas
+G++PARAMS := -m32 $(DEBUG) -I $(LIBINCLUDE) $(OPTIMIZE_FLAGS) $(LIBDRIVEINCLUDE) -Wall -fno-omit-frame-pointer -fno-use-cxa-atexit -nostdlib -fno-builtin -fno-exceptions -fno-rtti -fno-leading-underscore -Wno-write-strings -fpermissive -Wno-unknown-pragmas
+GCCPARAMS := -m32 $(DEBUG) -I $(LIBINCLUDE) $(OPTIMIZE_FLAGS) $(LIBDRIVEINCLUDE) -Wall -fno-omit-frame-pointer -nostdlib -fno-builtin -fleading-underscore -Wno-unknown-pragmas
 LDPARAMS := -m elf_i386
 
 USB_DIR := usb3
diff --git a/libdrive/include/config.h b/libdrive/include/config.h
new file mode 100644
index 0000000..04d3dc1
--- /dev/null
+++ b/libdrive/include/config.h
@@ -0,0 +1,9 @@
+#ifndef _HEISEN_KERNEL_LIB_USB_CONFIG_H
+#define _HEISEN_KERNEL_LIB_USB_CONFIG_H
+
+#define DEFAULT_CONTROL_TIMEOUT_MILLIS 1000
+#define DEFAULT_READ_TIMEOUT_MILLIS 200
+
+#define READ_BUFFER_SIZE 256
+
+#endif /*_HEISEN_KERNEL_LIB_USB_CONFIG_H*/
\ No newline at end of file
diff --git a/libdrive/include/internal.h b/libdrive/include/internal.h
new file mode 100644
index 0000000..5df9410
--- /dev/null
+++ b/libdrive/include/internal.h
@@ -0,0 +1,57 @@
+#ifndef _HEISEN_KERNEL_LIB_USB_INTERNAL_H_HEADER
+#define _HEISEN_KERNEL_LIB_USB_INTERNAL_H_HEADER
+
+#include "libusbserial.h"
+#include "config.h"
+#include "libusbtypes.h"
+#include <stdint.h>
+
+
+#define UNUSED_VAR(x) ((void)(x))
+
+#ifndef max
+#define max(a,b)     (((a) > (b) ? (a):(b))) 
+#endif
+
+#ifndef min
+
+#define min(a,b)     (((a) < (b) ? (a):(b))) 
+#endif
+
+
+#include <pthread.h>
+
+
+struct usbserial_endpoints{
+    uint8_t in;
+    uint8_t out;
+    uint8_t in_if;
+	uint8_t out_if;
+};
+
+
+struct usbserial_port
+{
+    const struct usbserial_driver *driver;
+
+	unsigned int port_idx;
+	struct usbserial_endpoints endp;
+	
+	libusb_device *usb_dev;
+    libusb_device_handle *usb_dev_hdl;
+    struct libusb_device_descriptor usb_dev_desc;
+
+	struct libusb_transfer *read_transfer;
+    usbserial_cb_read_fn cb_read;
+    usbserial_cb_error_fn cb_read_error;
+    void *cb_user_data;
+
+	pthread_mutex_t mutex;
+	volatile int read_cancel_flag;
+    unsigned char read_buffer[READ_BUFFER_SIZE];
+
+	void *driver_data;
+};
+
+
+#endif /*_HEISEN_KERNEL_LIB_USB_INTERNAL_H_HEADER*/
\ No newline at end of file
diff --git a/libdrive/include/libusbserial.h b/libdrive/include/libusbserial.h
new file mode 100644
index 0000000..9077145
--- /dev/null
+++ b/libdrive/include/libusbserial.h
@@ -0,0 +1,129 @@
+#ifndef _HEISEN_KERNEL_LIB_USB_SER_HEADER_H__
+#define _HEISEN_KERNEL_LIB_USB_SER_HEADER_H__
+
+#include "libusb.h"
+#include "libusbtypes.h"
+
+struct usbserial_port;
+
+typedef void (*usbserial_cb_read_fn)(void *data, size_t size, void *user_data);
+typedef void (*usbserial_cb_error_fn)(enum libusb_transfer_status status, void *user_data);
+
+enum usbserial_data_bits{
+    USBSERIAL_DATABITS_5 = 5,
+    USBSERIAL_DATABITS_6 = 6,
+    USBSERIAL_DATABITS_7 = 7,
+    USBSERIAL_DATABITS_8 = 8
+};
+
+enum usbserial_stop_bits{
+    USBSERIAL_STOPBITS_1,
+    USBSERIAL_STOPBITS_1_5,
+    USBSERIAL_STOPBITS_2
+};
+
+enum usb_serial_parity{
+    USB_SERIAL_PARITY_NONE,
+    USB_PARITY_ODD,
+    USB_PARITY_EVEN,
+    USB_PARITY_MARK,
+    USB_PARITY_SPACE
+};
+
+struct usbserial_config{
+    unsigned int baud;
+    enum usbserial_data_bits databits;
+    enum usbserial_stop_bits stopbits;
+    enum usb_serial_parity parity;
+    #if defined(__cplusplus)
+    bool flow_control;
+    bool auto_baud;
+    #endif /*__cplusplus*/
+};
+
+/* Returns a nonzero value, if a USB device is supported by one
+ * of the libusbserial drivers. */
+int usbserial_is_device_supported(uint16_t vid, uint16_t pid, uint8_t classs, uint8_t subclass);
+/* Get a short device name. It is guaranteed to return a valid C
+ * string (not NULL), if the device is supported, see
+ * usbserial_is_device_supported(). Otherwise, the results are
+ * undefined. */
+const char* usbserial_get_device_name(uint16_t vid, uint16_t pid, uint8_t classs, uint8_t subclass);
+const char* usbserial_get_device_name2(struct usbserial_port *port);
+/* Return the (expected) count of ports for a USB to Serial Adapter
+ * device. If the device is not supported, see
+ * usbserial_is_device_supported(), the results are undefined.
+ * Never returns an error code, but might return zero if an error
+ * occurs. */
+unsigned int usbserial_get_ports_count(uint16_t vid, uint16_t pid, uint8_t classs, uint8_t subclass);
+
+/* Initialize a serial port instance.
+ * Returns zero on success, and an error code on failure.
+ * The usbserial_port instance object is stored in *out_port.
+ * It is guaranteed that *out_port is NULL if an error occured
+ * (non-zero return value) and that *out_port is not NULL on
+ * success (zero return value).
+ * Results are undefined, if port_idx >= usbserial_get_ports_count()
+ * return value.
+ * cb_read must not be NULL, unless no read operations are performed
+ * (usbserial_start_reader() is not called afterwards).
+ * read_error_cb can be NULL, then no read error notifications are sent. */
+int usbserial_port_init(struct usbserial_port **out_port,
+		libusb_device_handle *usb_device_handle, unsigned int port_idx,
+        usbserial_cb_read_fn cb_read, usbserial_cb_error_fn read_error_cb, void* cb_user_data);
+/* Deinitialize / invalidate a serial port instance.
+ * Returns zero on success, and an error code on failure.
+ * Results are undefined, if usbserial_stop_reader() was
+ * not called before, unless usbserial_start_reader() was
+ * not called. */
+int usbserial_port_deinit(struct usbserial_port *port);
+
+/* Set the line configuration (including baud rate) for a
+ * serial port instance.
+ * Returns zero on success, and an error code on failure. */
+int usbserial_port_set_config(struct usbserial_port *port, const struct usbserial_config *config);
+
+/* Start reading from the port.
+ * Returns zero on success, and an error code on failure. */
+int usbserial_start_reader(struct usbserial_port *port);
+/* Stop reading from the port.
+ * Returns zero on success, and an error code on failure.
+ * This function must not be called from the same thread in which
+ * the libusb events are handled! */
+int usbserial_stop_reader(struct usbserial_port *port);
+
+/* Synchronously read data from a port.
+ * Returns zero on success, and an error code on failure. */
+int usbserial_read(struct usbserial_port *port, void *data, size_t size, int timeout);
+/* Synchronously write data to a port.
+ * Returns zero on success, and an error code on failure. */
+int usbserial_write(struct usbserial_port *port, const void *data, size_t size);
+
+/* Purge the hardware read (rx) / (tx) buffer.
+ * Returns zero on success, and an error code on failure.
+ * Not supported by all drivers / devices, returns
+ * USBSERIAL_ERROR_UNSUPPORTED_OPERATION in this case. */
+int usbserial_purge(struct usbserial_port *port, int rx, int tx);
+
+/* */
+int usbserial_set_dtr_rts(struct usbserial_port *port, int dtr, int rts);
+
+/* Get the string represenation for an usbserial error code,
+ * which can be a libusb error code.
+ * Returns NULL, if 0 == error_code and is guaranteed to return
+ * an non-NULL C string if 0 != error_code */
+const char* usbserial_get_error_str(int error_code);
+
+#define DEFINE_USBSERIAL_ERROR(num) (-1000000 - num)
+
+#define USBSERIAL_ERROR_UNSUPPORTED_OPERATION DEFINE_USBSERIAL_ERROR(0)
+#define USBSERIAL_ERROR_ILLEGAL_STATE DEFINE_USBSERIAL_ERROR(1)
+#define USBSERIAL_ERROR_INVALID_PARAMETER DEFINE_USBSERIAL_ERROR(2)
+#define USBSERIAL_ERROR_RESOURCE_ALLOC_FAILED DEFINE_USBSERIAL_ERROR(3)
+#define USBSERIAL_ERROR_NO_SUCH_DEVICE DEFINE_USBSERIAL_ERROR(4)
+#define USBSERIAL_ERROR_UNSUPPORTED_DEVICE DEFINE_USBSERIAL_ERROR(5)
+#define USBSERIAL_ERROR_UNSUPPORTED_BAUD_RATE DEFINE_USBSERIAL_ERROR(6)
+#define USBSERIAL_ERROR_INVALID_PORT_IDX DEFINE_USBSERIAL_ERROR(7)
+#define USBSERIAL_ERROR_CTRL_CMD_FAILED DEFINE_USBSERIAL_ERROR(8)
+
+#endif /*_HEISEN_KERNEL_LIB_USB_SER_HEADER_H__*/
\ No newline at end of file
-- 
2.43.0

